// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/sujithshajee/dnsbl/app/ent/appquery"
	"github.com/sujithshajee/dnsbl/app/ent/appresponse"
	"github.com/sujithshajee/dnsbl/app/ent/ip"
	"github.com/sujithshajee/dnsbl/app/ent/predicate"
	"github.com/sujithshajee/dnsbl/app/ent/task"
	"github.com/sujithshajee/dnsbl/app/ent/user"
)

// AppQueryWhereInput represents a where input for filtering AppQuery queries.
type AppQueryWhereInput struct {
	Not *AppQueryWhereInput   `json:"not,omitempty"`
	Or  []*AppQueryWhereInput `json:"or,omitempty"`
	And []*AppQueryWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *uuid.UUID  `json:"id,omitempty"`
	IDNEQ   *uuid.UUID  `json:"idNEQ,omitempty"`
	IDIn    []uuid.UUID `json:"idIn,omitempty"`
	IDNotIn []uuid.UUID `json:"idNotIn,omitempty"`
	IDGT    *uuid.UUID  `json:"idGT,omitempty"`
	IDGTE   *uuid.UUID  `json:"idGTE,omitempty"`
	IDLT    *uuid.UUID  `json:"idLT,omitempty"`
	IDLTE   *uuid.UUID  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "responses" edge predicates.
	HasResponses     *bool                    `json:"hasResponses,omitempty"`
	HasResponsesWith []*AppResponseWhereInput `json:"hasResponsesWith,omitempty"`

	// "ipaddress" edge predicates.
	HasIpaddress     *bool           `json:"hasIpaddress,omitempty"`
	HasIpaddressWith []*IPWhereInput `json:"hasIpaddressWith,omitempty"`
}

// Filter applies the AppQueryWhereInput filter on the AppQueryQuery builder.
func (i *AppQueryWhereInput) Filter(q *AppQueryQuery) (*AppQueryQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering appqueries.
// An error is returned if the input is empty or invalid.
func (i *AppQueryWhereInput) P() (predicate.AppQuery, error) {
	var predicates []predicate.AppQuery
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, appquery.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.AppQuery, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, appquery.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.AppQuery, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, appquery.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, appquery.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, appquery.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, appquery.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, appquery.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, appquery.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, appquery.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, appquery.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, appquery.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, appquery.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, appquery.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, appquery.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, appquery.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, appquery.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, appquery.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, appquery.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, appquery.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, appquery.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, appquery.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, appquery.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, appquery.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, appquery.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, appquery.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, appquery.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, appquery.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasResponses != nil {
		p := appquery.HasResponses()
		if !*i.HasResponses {
			p = appquery.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasResponsesWith) > 0 {
		with := make([]predicate.AppResponse, 0, len(i.HasResponsesWith))
		for _, w := range i.HasResponsesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, appquery.HasResponsesWith(with...))
	}
	if i.HasIpaddress != nil {
		p := appquery.HasIpaddress()
		if !*i.HasIpaddress {
			p = appquery.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasIpaddressWith) > 0 {
		with := make([]predicate.IP, 0, len(i.HasIpaddressWith))
		for _, w := range i.HasIpaddressWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, appquery.HasIpaddressWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("github.com/sujithshajee/dnsbl/app/ent: empty predicate AppQueryWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return appquery.And(predicates...), nil
	}
}

// AppResponseWhereInput represents a where input for filtering AppResponse queries.
type AppResponseWhereInput struct {
	Not *AppResponseWhereInput   `json:"not,omitempty"`
	Or  []*AppResponseWhereInput `json:"or,omitempty"`
	And []*AppResponseWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *uuid.UUID  `json:"id,omitempty"`
	IDNEQ   *uuid.UUID  `json:"idNEQ,omitempty"`
	IDIn    []uuid.UUID `json:"idIn,omitempty"`
	IDNotIn []uuid.UUID `json:"idNotIn,omitempty"`
	IDGT    *uuid.UUID  `json:"idGT,omitempty"`
	IDGTE   *uuid.UUID  `json:"idGTE,omitempty"`
	IDLT    *uuid.UUID  `json:"idLT,omitempty"`
	IDLTE   *uuid.UUID  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "responsecode" field predicates.
	Responsecode             *string  `json:"responsecode,omitempty"`
	ResponsecodeNEQ          *string  `json:"responsecodeNEQ,omitempty"`
	ResponsecodeIn           []string `json:"responsecodeIn,omitempty"`
	ResponsecodeNotIn        []string `json:"responsecodeNotIn,omitempty"`
	ResponsecodeGT           *string  `json:"responsecodeGT,omitempty"`
	ResponsecodeGTE          *string  `json:"responsecodeGTE,omitempty"`
	ResponsecodeLT           *string  `json:"responsecodeLT,omitempty"`
	ResponsecodeLTE          *string  `json:"responsecodeLTE,omitempty"`
	ResponsecodeContains     *string  `json:"responsecodeContains,omitempty"`
	ResponsecodeHasPrefix    *string  `json:"responsecodeHasPrefix,omitempty"`
	ResponsecodeHasSuffix    *string  `json:"responsecodeHasSuffix,omitempty"`
	ResponsecodeEqualFold    *string  `json:"responsecodeEqualFold,omitempty"`
	ResponsecodeContainsFold *string  `json:"responsecodeContainsFold,omitempty"`

	// "codedescription" field predicates.
	Codedescription             *string  `json:"codedescription,omitempty"`
	CodedescriptionNEQ          *string  `json:"codedescriptionNEQ,omitempty"`
	CodedescriptionIn           []string `json:"codedescriptionIn,omitempty"`
	CodedescriptionNotIn        []string `json:"codedescriptionNotIn,omitempty"`
	CodedescriptionGT           *string  `json:"codedescriptionGT,omitempty"`
	CodedescriptionGTE          *string  `json:"codedescriptionGTE,omitempty"`
	CodedescriptionLT           *string  `json:"codedescriptionLT,omitempty"`
	CodedescriptionLTE          *string  `json:"codedescriptionLTE,omitempty"`
	CodedescriptionContains     *string  `json:"codedescriptionContains,omitempty"`
	CodedescriptionHasPrefix    *string  `json:"codedescriptionHasPrefix,omitempty"`
	CodedescriptionHasSuffix    *string  `json:"codedescriptionHasSuffix,omitempty"`
	CodedescriptionEqualFold    *string  `json:"codedescriptionEqualFold,omitempty"`
	CodedescriptionContainsFold *string  `json:"codedescriptionContainsFold,omitempty"`

	// "query" edge predicates.
	HasQuery     *bool                 `json:"hasQuery,omitempty"`
	HasQueryWith []*AppQueryWhereInput `json:"hasQueryWith,omitempty"`
}

// Filter applies the AppResponseWhereInput filter on the AppResponseQuery builder.
func (i *AppResponseWhereInput) Filter(q *AppResponseQuery) (*AppResponseQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering appresponses.
// An error is returned if the input is empty or invalid.
func (i *AppResponseWhereInput) P() (predicate.AppResponse, error) {
	var predicates []predicate.AppResponse
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, appresponse.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.AppResponse, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, appresponse.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.AppResponse, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, appresponse.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, appresponse.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, appresponse.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, appresponse.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, appresponse.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, appresponse.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, appresponse.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, appresponse.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, appresponse.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, appresponse.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, appresponse.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, appresponse.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, appresponse.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, appresponse.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, appresponse.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, appresponse.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, appresponse.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, appresponse.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, appresponse.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, appresponse.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, appresponse.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, appresponse.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, appresponse.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, appresponse.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, appresponse.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.Responsecode != nil {
		predicates = append(predicates, appresponse.ResponsecodeEQ(*i.Responsecode))
	}
	if i.ResponsecodeNEQ != nil {
		predicates = append(predicates, appresponse.ResponsecodeNEQ(*i.ResponsecodeNEQ))
	}
	if len(i.ResponsecodeIn) > 0 {
		predicates = append(predicates, appresponse.ResponsecodeIn(i.ResponsecodeIn...))
	}
	if len(i.ResponsecodeNotIn) > 0 {
		predicates = append(predicates, appresponse.ResponsecodeNotIn(i.ResponsecodeNotIn...))
	}
	if i.ResponsecodeGT != nil {
		predicates = append(predicates, appresponse.ResponsecodeGT(*i.ResponsecodeGT))
	}
	if i.ResponsecodeGTE != nil {
		predicates = append(predicates, appresponse.ResponsecodeGTE(*i.ResponsecodeGTE))
	}
	if i.ResponsecodeLT != nil {
		predicates = append(predicates, appresponse.ResponsecodeLT(*i.ResponsecodeLT))
	}
	if i.ResponsecodeLTE != nil {
		predicates = append(predicates, appresponse.ResponsecodeLTE(*i.ResponsecodeLTE))
	}
	if i.ResponsecodeContains != nil {
		predicates = append(predicates, appresponse.ResponsecodeContains(*i.ResponsecodeContains))
	}
	if i.ResponsecodeHasPrefix != nil {
		predicates = append(predicates, appresponse.ResponsecodeHasPrefix(*i.ResponsecodeHasPrefix))
	}
	if i.ResponsecodeHasSuffix != nil {
		predicates = append(predicates, appresponse.ResponsecodeHasSuffix(*i.ResponsecodeHasSuffix))
	}
	if i.ResponsecodeEqualFold != nil {
		predicates = append(predicates, appresponse.ResponsecodeEqualFold(*i.ResponsecodeEqualFold))
	}
	if i.ResponsecodeContainsFold != nil {
		predicates = append(predicates, appresponse.ResponsecodeContainsFold(*i.ResponsecodeContainsFold))
	}
	if i.Codedescription != nil {
		predicates = append(predicates, appresponse.CodedescriptionEQ(*i.Codedescription))
	}
	if i.CodedescriptionNEQ != nil {
		predicates = append(predicates, appresponse.CodedescriptionNEQ(*i.CodedescriptionNEQ))
	}
	if len(i.CodedescriptionIn) > 0 {
		predicates = append(predicates, appresponse.CodedescriptionIn(i.CodedescriptionIn...))
	}
	if len(i.CodedescriptionNotIn) > 0 {
		predicates = append(predicates, appresponse.CodedescriptionNotIn(i.CodedescriptionNotIn...))
	}
	if i.CodedescriptionGT != nil {
		predicates = append(predicates, appresponse.CodedescriptionGT(*i.CodedescriptionGT))
	}
	if i.CodedescriptionGTE != nil {
		predicates = append(predicates, appresponse.CodedescriptionGTE(*i.CodedescriptionGTE))
	}
	if i.CodedescriptionLT != nil {
		predicates = append(predicates, appresponse.CodedescriptionLT(*i.CodedescriptionLT))
	}
	if i.CodedescriptionLTE != nil {
		predicates = append(predicates, appresponse.CodedescriptionLTE(*i.CodedescriptionLTE))
	}
	if i.CodedescriptionContains != nil {
		predicates = append(predicates, appresponse.CodedescriptionContains(*i.CodedescriptionContains))
	}
	if i.CodedescriptionHasPrefix != nil {
		predicates = append(predicates, appresponse.CodedescriptionHasPrefix(*i.CodedescriptionHasPrefix))
	}
	if i.CodedescriptionHasSuffix != nil {
		predicates = append(predicates, appresponse.CodedescriptionHasSuffix(*i.CodedescriptionHasSuffix))
	}
	if i.CodedescriptionEqualFold != nil {
		predicates = append(predicates, appresponse.CodedescriptionEqualFold(*i.CodedescriptionEqualFold))
	}
	if i.CodedescriptionContainsFold != nil {
		predicates = append(predicates, appresponse.CodedescriptionContainsFold(*i.CodedescriptionContainsFold))
	}

	if i.HasQuery != nil {
		p := appresponse.HasQuery()
		if !*i.HasQuery {
			p = appresponse.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasQueryWith) > 0 {
		with := make([]predicate.AppQuery, 0, len(i.HasQueryWith))
		for _, w := range i.HasQueryWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, appresponse.HasQueryWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("github.com/sujithshajee/dnsbl/app/ent: empty predicate AppResponseWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return appresponse.And(predicates...), nil
	}
}

// IPWhereInput represents a where input for filtering IP queries.
type IPWhereInput struct {
	Not *IPWhereInput   `json:"not,omitempty"`
	Or  []*IPWhereInput `json:"or,omitempty"`
	And []*IPWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *uuid.UUID  `json:"id,omitempty"`
	IDNEQ   *uuid.UUID  `json:"idNEQ,omitempty"`
	IDIn    []uuid.UUID `json:"idIn,omitempty"`
	IDNotIn []uuid.UUID `json:"idNotIn,omitempty"`
	IDGT    *uuid.UUID  `json:"idGT,omitempty"`
	IDGTE   *uuid.UUID  `json:"idGTE,omitempty"`
	IDLT    *uuid.UUID  `json:"idLT,omitempty"`
	IDLTE   *uuid.UUID  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "ip_address" field predicates.
	IPAddress             *string  `json:"ipAddress,omitempty"`
	IPAddressNEQ          *string  `json:"ipAddressNEQ,omitempty"`
	IPAddressIn           []string `json:"ipAddressIn,omitempty"`
	IPAddressNotIn        []string `json:"ipAddressNotIn,omitempty"`
	IPAddressGT           *string  `json:"ipAddressGT,omitempty"`
	IPAddressGTE          *string  `json:"ipAddressGTE,omitempty"`
	IPAddressLT           *string  `json:"ipAddressLT,omitempty"`
	IPAddressLTE          *string  `json:"ipAddressLTE,omitempty"`
	IPAddressContains     *string  `json:"ipAddressContains,omitempty"`
	IPAddressHasPrefix    *string  `json:"ipAddressHasPrefix,omitempty"`
	IPAddressHasSuffix    *string  `json:"ipAddressHasSuffix,omitempty"`
	IPAddressEqualFold    *string  `json:"ipAddressEqualFold,omitempty"`
	IPAddressContainsFold *string  `json:"ipAddressContainsFold,omitempty"`

	// "queries" edge predicates.
	HasQueries     *bool                 `json:"hasQueries,omitempty"`
	HasQueriesWith []*AppQueryWhereInput `json:"hasQueriesWith,omitempty"`
}

// Filter applies the IPWhereInput filter on the IPQuery builder.
func (i *IPWhereInput) Filter(q *IPQuery) (*IPQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering ips.
// An error is returned if the input is empty or invalid.
func (i *IPWhereInput) P() (predicate.IP, error) {
	var predicates []predicate.IP
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, ip.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.IP, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, ip.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.IP, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, ip.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, ip.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, ip.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, ip.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, ip.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, ip.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, ip.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, ip.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, ip.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, ip.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, ip.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, ip.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, ip.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, ip.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, ip.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, ip.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, ip.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, ip.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, ip.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, ip.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, ip.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, ip.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, ip.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, ip.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, ip.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.IPAddress != nil {
		predicates = append(predicates, ip.IPAddressEQ(*i.IPAddress))
	}
	if i.IPAddressNEQ != nil {
		predicates = append(predicates, ip.IPAddressNEQ(*i.IPAddressNEQ))
	}
	if len(i.IPAddressIn) > 0 {
		predicates = append(predicates, ip.IPAddressIn(i.IPAddressIn...))
	}
	if len(i.IPAddressNotIn) > 0 {
		predicates = append(predicates, ip.IPAddressNotIn(i.IPAddressNotIn...))
	}
	if i.IPAddressGT != nil {
		predicates = append(predicates, ip.IPAddressGT(*i.IPAddressGT))
	}
	if i.IPAddressGTE != nil {
		predicates = append(predicates, ip.IPAddressGTE(*i.IPAddressGTE))
	}
	if i.IPAddressLT != nil {
		predicates = append(predicates, ip.IPAddressLT(*i.IPAddressLT))
	}
	if i.IPAddressLTE != nil {
		predicates = append(predicates, ip.IPAddressLTE(*i.IPAddressLTE))
	}
	if i.IPAddressContains != nil {
		predicates = append(predicates, ip.IPAddressContains(*i.IPAddressContains))
	}
	if i.IPAddressHasPrefix != nil {
		predicates = append(predicates, ip.IPAddressHasPrefix(*i.IPAddressHasPrefix))
	}
	if i.IPAddressHasSuffix != nil {
		predicates = append(predicates, ip.IPAddressHasSuffix(*i.IPAddressHasSuffix))
	}
	if i.IPAddressEqualFold != nil {
		predicates = append(predicates, ip.IPAddressEqualFold(*i.IPAddressEqualFold))
	}
	if i.IPAddressContainsFold != nil {
		predicates = append(predicates, ip.IPAddressContainsFold(*i.IPAddressContainsFold))
	}

	if i.HasQueries != nil {
		p := ip.HasQueries()
		if !*i.HasQueries {
			p = ip.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasQueriesWith) > 0 {
		with := make([]predicate.AppQuery, 0, len(i.HasQueriesWith))
		for _, w := range i.HasQueriesWith {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			with = append(with, p)
		}
		predicates = append(predicates, ip.HasQueriesWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("github.com/sujithshajee/dnsbl/app/ent: empty predicate IPWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return ip.And(predicates...), nil
	}
}

// TaskWhereInput represents a where input for filtering Task queries.
type TaskWhereInput struct {
	Not *TaskWhereInput   `json:"not,omitempty"`
	Or  []*TaskWhereInput `json:"or,omitempty"`
	And []*TaskWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *uuid.UUID  `json:"id,omitempty"`
	IDNEQ   *uuid.UUID  `json:"idNEQ,omitempty"`
	IDIn    []uuid.UUID `json:"idIn,omitempty"`
	IDNotIn []uuid.UUID `json:"idNotIn,omitempty"`
	IDGT    *uuid.UUID  `json:"idGT,omitempty"`
	IDGTE   *uuid.UUID  `json:"idGTE,omitempty"`
	IDLT    *uuid.UUID  `json:"idLT,omitempty"`
	IDLTE   *uuid.UUID  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "type" field predicates.
	Type      *task.Type  `json:"type,omitempty"`
	TypeNEQ   *task.Type  `json:"typeNEQ,omitempty"`
	TypeIn    []task.Type `json:"typeIn,omitempty"`
	TypeNotIn []task.Type `json:"typeNotIn,omitempty"`

	// "ipaddress" field predicates.
	Ipaddress             *string  `json:"ipaddress,omitempty"`
	IpaddressNEQ          *string  `json:"ipaddressNEQ,omitempty"`
	IpaddressIn           []string `json:"ipaddressIn,omitempty"`
	IpaddressNotIn        []string `json:"ipaddressNotIn,omitempty"`
	IpaddressGT           *string  `json:"ipaddressGT,omitempty"`
	IpaddressGTE          *string  `json:"ipaddressGTE,omitempty"`
	IpaddressLT           *string  `json:"ipaddressLT,omitempty"`
	IpaddressLTE          *string  `json:"ipaddressLTE,omitempty"`
	IpaddressContains     *string  `json:"ipaddressContains,omitempty"`
	IpaddressHasPrefix    *string  `json:"ipaddressHasPrefix,omitempty"`
	IpaddressHasSuffix    *string  `json:"ipaddressHasSuffix,omitempty"`
	IpaddressIsNil        bool     `json:"ipaddressIsNil,omitempty"`
	IpaddressNotNil       bool     `json:"ipaddressNotNil,omitempty"`
	IpaddressEqualFold    *string  `json:"ipaddressEqualFold,omitempty"`
	IpaddressContainsFold *string  `json:"ipaddressContainsFold,omitempty"`

	// "status" field predicates.
	Status      *task.Status  `json:"status,omitempty"`
	StatusNEQ   *task.Status  `json:"statusNEQ,omitempty"`
	StatusIn    []task.Status `json:"statusIn,omitempty"`
	StatusNotIn []task.Status `json:"statusNotIn,omitempty"`

	// "error" field predicates.
	Error             *string  `json:"error,omitempty"`
	ErrorNEQ          *string  `json:"errorNEQ,omitempty"`
	ErrorIn           []string `json:"errorIn,omitempty"`
	ErrorNotIn        []string `json:"errorNotIn,omitempty"`
	ErrorGT           *string  `json:"errorGT,omitempty"`
	ErrorGTE          *string  `json:"errorGTE,omitempty"`
	ErrorLT           *string  `json:"errorLT,omitempty"`
	ErrorLTE          *string  `json:"errorLTE,omitempty"`
	ErrorContains     *string  `json:"errorContains,omitempty"`
	ErrorHasPrefix    *string  `json:"errorHasPrefix,omitempty"`
	ErrorHasSuffix    *string  `json:"errorHasSuffix,omitempty"`
	ErrorIsNil        bool     `json:"errorIsNil,omitempty"`
	ErrorNotNil       bool     `json:"errorNotNil,omitempty"`
	ErrorEqualFold    *string  `json:"errorEqualFold,omitempty"`
	ErrorContainsFold *string  `json:"errorContainsFold,omitempty"`

	// "completed_by" field predicates.
	CompletedBy       *time.Time  `json:"completedBy,omitempty"`
	CompletedByNEQ    *time.Time  `json:"completedByNEQ,omitempty"`
	CompletedByIn     []time.Time `json:"completedByIn,omitempty"`
	CompletedByNotIn  []time.Time `json:"completedByNotIn,omitempty"`
	CompletedByGT     *time.Time  `json:"completedByGT,omitempty"`
	CompletedByGTE    *time.Time  `json:"completedByGTE,omitempty"`
	CompletedByLT     *time.Time  `json:"completedByLT,omitempty"`
	CompletedByLTE    *time.Time  `json:"completedByLTE,omitempty"`
	CompletedByIsNil  bool        `json:"completedByIsNil,omitempty"`
	CompletedByNotNil bool        `json:"completedByNotNil,omitempty"`
}

// Filter applies the TaskWhereInput filter on the TaskQuery builder.
func (i *TaskWhereInput) Filter(q *TaskQuery) (*TaskQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering tasks.
// An error is returned if the input is empty or invalid.
func (i *TaskWhereInput) P() (predicate.Task, error) {
	var predicates []predicate.Task
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, task.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Task, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, task.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Task, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, task.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, task.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, task.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, task.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, task.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, task.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, task.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, task.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, task.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, task.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, task.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, task.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, task.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, task.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, task.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, task.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, task.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, task.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, task.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, task.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, task.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, task.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, task.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, task.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, task.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.Type != nil {
		predicates = append(predicates, task.TypeEQ(*i.Type))
	}
	if i.TypeNEQ != nil {
		predicates = append(predicates, task.TypeNEQ(*i.TypeNEQ))
	}
	if len(i.TypeIn) > 0 {
		predicates = append(predicates, task.TypeIn(i.TypeIn...))
	}
	if len(i.TypeNotIn) > 0 {
		predicates = append(predicates, task.TypeNotIn(i.TypeNotIn...))
	}
	if i.Ipaddress != nil {
		predicates = append(predicates, task.IpaddressEQ(*i.Ipaddress))
	}
	if i.IpaddressNEQ != nil {
		predicates = append(predicates, task.IpaddressNEQ(*i.IpaddressNEQ))
	}
	if len(i.IpaddressIn) > 0 {
		predicates = append(predicates, task.IpaddressIn(i.IpaddressIn...))
	}
	if len(i.IpaddressNotIn) > 0 {
		predicates = append(predicates, task.IpaddressNotIn(i.IpaddressNotIn...))
	}
	if i.IpaddressGT != nil {
		predicates = append(predicates, task.IpaddressGT(*i.IpaddressGT))
	}
	if i.IpaddressGTE != nil {
		predicates = append(predicates, task.IpaddressGTE(*i.IpaddressGTE))
	}
	if i.IpaddressLT != nil {
		predicates = append(predicates, task.IpaddressLT(*i.IpaddressLT))
	}
	if i.IpaddressLTE != nil {
		predicates = append(predicates, task.IpaddressLTE(*i.IpaddressLTE))
	}
	if i.IpaddressContains != nil {
		predicates = append(predicates, task.IpaddressContains(*i.IpaddressContains))
	}
	if i.IpaddressHasPrefix != nil {
		predicates = append(predicates, task.IpaddressHasPrefix(*i.IpaddressHasPrefix))
	}
	if i.IpaddressHasSuffix != nil {
		predicates = append(predicates, task.IpaddressHasSuffix(*i.IpaddressHasSuffix))
	}
	if i.IpaddressIsNil {
		predicates = append(predicates, task.IpaddressIsNil())
	}
	if i.IpaddressNotNil {
		predicates = append(predicates, task.IpaddressNotNil())
	}
	if i.IpaddressEqualFold != nil {
		predicates = append(predicates, task.IpaddressEqualFold(*i.IpaddressEqualFold))
	}
	if i.IpaddressContainsFold != nil {
		predicates = append(predicates, task.IpaddressContainsFold(*i.IpaddressContainsFold))
	}
	if i.Status != nil {
		predicates = append(predicates, task.StatusEQ(*i.Status))
	}
	if i.StatusNEQ != nil {
		predicates = append(predicates, task.StatusNEQ(*i.StatusNEQ))
	}
	if len(i.StatusIn) > 0 {
		predicates = append(predicates, task.StatusIn(i.StatusIn...))
	}
	if len(i.StatusNotIn) > 0 {
		predicates = append(predicates, task.StatusNotIn(i.StatusNotIn...))
	}
	if i.Error != nil {
		predicates = append(predicates, task.ErrorEQ(*i.Error))
	}
	if i.ErrorNEQ != nil {
		predicates = append(predicates, task.ErrorNEQ(*i.ErrorNEQ))
	}
	if len(i.ErrorIn) > 0 {
		predicates = append(predicates, task.ErrorIn(i.ErrorIn...))
	}
	if len(i.ErrorNotIn) > 0 {
		predicates = append(predicates, task.ErrorNotIn(i.ErrorNotIn...))
	}
	if i.ErrorGT != nil {
		predicates = append(predicates, task.ErrorGT(*i.ErrorGT))
	}
	if i.ErrorGTE != nil {
		predicates = append(predicates, task.ErrorGTE(*i.ErrorGTE))
	}
	if i.ErrorLT != nil {
		predicates = append(predicates, task.ErrorLT(*i.ErrorLT))
	}
	if i.ErrorLTE != nil {
		predicates = append(predicates, task.ErrorLTE(*i.ErrorLTE))
	}
	if i.ErrorContains != nil {
		predicates = append(predicates, task.ErrorContains(*i.ErrorContains))
	}
	if i.ErrorHasPrefix != nil {
		predicates = append(predicates, task.ErrorHasPrefix(*i.ErrorHasPrefix))
	}
	if i.ErrorHasSuffix != nil {
		predicates = append(predicates, task.ErrorHasSuffix(*i.ErrorHasSuffix))
	}
	if i.ErrorIsNil {
		predicates = append(predicates, task.ErrorIsNil())
	}
	if i.ErrorNotNil {
		predicates = append(predicates, task.ErrorNotNil())
	}
	if i.ErrorEqualFold != nil {
		predicates = append(predicates, task.ErrorEqualFold(*i.ErrorEqualFold))
	}
	if i.ErrorContainsFold != nil {
		predicates = append(predicates, task.ErrorContainsFold(*i.ErrorContainsFold))
	}
	if i.CompletedBy != nil {
		predicates = append(predicates, task.CompletedByEQ(*i.CompletedBy))
	}
	if i.CompletedByNEQ != nil {
		predicates = append(predicates, task.CompletedByNEQ(*i.CompletedByNEQ))
	}
	if len(i.CompletedByIn) > 0 {
		predicates = append(predicates, task.CompletedByIn(i.CompletedByIn...))
	}
	if len(i.CompletedByNotIn) > 0 {
		predicates = append(predicates, task.CompletedByNotIn(i.CompletedByNotIn...))
	}
	if i.CompletedByGT != nil {
		predicates = append(predicates, task.CompletedByGT(*i.CompletedByGT))
	}
	if i.CompletedByGTE != nil {
		predicates = append(predicates, task.CompletedByGTE(*i.CompletedByGTE))
	}
	if i.CompletedByLT != nil {
		predicates = append(predicates, task.CompletedByLT(*i.CompletedByLT))
	}
	if i.CompletedByLTE != nil {
		predicates = append(predicates, task.CompletedByLTE(*i.CompletedByLTE))
	}
	if i.CompletedByIsNil {
		predicates = append(predicates, task.CompletedByIsNil())
	}
	if i.CompletedByNotNil {
		predicates = append(predicates, task.CompletedByNotNil())
	}

	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("github.com/sujithshajee/dnsbl/app/ent: empty predicate TaskWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return task.And(predicates...), nil
	}
}

// UserWhereInput represents a where input for filtering User queries.
type UserWhereInput struct {
	Not *UserWhereInput   `json:"not,omitempty"`
	Or  []*UserWhereInput `json:"or,omitempty"`
	And []*UserWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *uuid.UUID  `json:"id,omitempty"`
	IDNEQ   *uuid.UUID  `json:"idNEQ,omitempty"`
	IDIn    []uuid.UUID `json:"idIn,omitempty"`
	IDNotIn []uuid.UUID `json:"idNotIn,omitempty"`
	IDGT    *uuid.UUID  `json:"idGT,omitempty"`
	IDGTE   *uuid.UUID  `json:"idGTE,omitempty"`
	IDLT    *uuid.UUID  `json:"idLT,omitempty"`
	IDLTE   *uuid.UUID  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "username" field predicates.
	Username             *string  `json:"username,omitempty"`
	UsernameNEQ          *string  `json:"usernameNEQ,omitempty"`
	UsernameIn           []string `json:"usernameIn,omitempty"`
	UsernameNotIn        []string `json:"usernameNotIn,omitempty"`
	UsernameGT           *string  `json:"usernameGT,omitempty"`
	UsernameGTE          *string  `json:"usernameGTE,omitempty"`
	UsernameLT           *string  `json:"usernameLT,omitempty"`
	UsernameLTE          *string  `json:"usernameLTE,omitempty"`
	UsernameContains     *string  `json:"usernameContains,omitempty"`
	UsernameHasPrefix    *string  `json:"usernameHasPrefix,omitempty"`
	UsernameHasSuffix    *string  `json:"usernameHasSuffix,omitempty"`
	UsernameEqualFold    *string  `json:"usernameEqualFold,omitempty"`
	UsernameContainsFold *string  `json:"usernameContainsFold,omitempty"`
}

// Filter applies the UserWhereInput filter on the UserQuery builder.
func (i *UserWhereInput) Filter(q *UserQuery) (*UserQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		return nil, err
	}
	return q.Where(p), nil
}

// P returns a predicate for filtering users.
// An error is returned if the input is empty or invalid.
func (i *UserWhereInput) P() (predicate.User, error) {
	var predicates []predicate.User
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, user.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.User, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			or = append(or, p)
		}
		predicates = append(predicates, user.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, err
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.User, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, err
			}
			and = append(and, p)
		}
		predicates = append(predicates, user.And(and...))
	}
	if i.ID != nil {
		predicates = append(predicates, user.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, user.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, user.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, user.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, user.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, user.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, user.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, user.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, user.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, user.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, user.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, user.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, user.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, user.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, user.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, user.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, user.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, user.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, user.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, user.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, user.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, user.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, user.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, user.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.Username != nil {
		predicates = append(predicates, user.UsernameEQ(*i.Username))
	}
	if i.UsernameNEQ != nil {
		predicates = append(predicates, user.UsernameNEQ(*i.UsernameNEQ))
	}
	if len(i.UsernameIn) > 0 {
		predicates = append(predicates, user.UsernameIn(i.UsernameIn...))
	}
	if len(i.UsernameNotIn) > 0 {
		predicates = append(predicates, user.UsernameNotIn(i.UsernameNotIn...))
	}
	if i.UsernameGT != nil {
		predicates = append(predicates, user.UsernameGT(*i.UsernameGT))
	}
	if i.UsernameGTE != nil {
		predicates = append(predicates, user.UsernameGTE(*i.UsernameGTE))
	}
	if i.UsernameLT != nil {
		predicates = append(predicates, user.UsernameLT(*i.UsernameLT))
	}
	if i.UsernameLTE != nil {
		predicates = append(predicates, user.UsernameLTE(*i.UsernameLTE))
	}
	if i.UsernameContains != nil {
		predicates = append(predicates, user.UsernameContains(*i.UsernameContains))
	}
	if i.UsernameHasPrefix != nil {
		predicates = append(predicates, user.UsernameHasPrefix(*i.UsernameHasPrefix))
	}
	if i.UsernameHasSuffix != nil {
		predicates = append(predicates, user.UsernameHasSuffix(*i.UsernameHasSuffix))
	}
	if i.UsernameEqualFold != nil {
		predicates = append(predicates, user.UsernameEqualFold(*i.UsernameEqualFold))
	}
	if i.UsernameContainsFold != nil {
		predicates = append(predicates, user.UsernameContainsFold(*i.UsernameContainsFold))
	}

	switch len(predicates) {
	case 0:
		return nil, fmt.Errorf("github.com/sujithshajee/dnsbl/app/ent: empty predicate UserWhereInput")
	case 1:
		return predicates[0], nil
	default:
		return user.And(predicates...), nil
	}
}
