// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/sujithshajee/dnsbl/app/ent/appquery"
	"github.com/sujithshajee/dnsbl/app/ent/appresponse"
)

// AppResponse is the model entity for the AppResponse schema.
type AppResponse struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Responsecode holds the value of the "responsecode" field.
	Responsecode string `json:"responsecode,omitempty"`
	// Codedescription holds the value of the "codedescription" field.
	Codedescription string `json:"codedescription,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AppResponseQuery when eager-loading is set.
	Edges               AppResponseEdges `json:"edges"`
	app_query_responses *uuid.UUID
}

// AppResponseEdges holds the relations/edges for other nodes in the graph.
type AppResponseEdges struct {
	// Query holds the value of the query edge.
	Query *AppQuery `json:"query,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// QueryOrErr returns the Query value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AppResponseEdges) QueryOrErr() (*AppQuery, error) {
	if e.loadedTypes[0] {
		if e.Query == nil {
			// The edge query was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: appquery.Label}
		}
		return e.Query, nil
	}
	return nil, &NotLoadedError{edge: "query"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppResponse) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case appresponse.FieldResponsecode, appresponse.FieldCodedescription:
			values[i] = new(sql.NullString)
		case appresponse.FieldCreatedAt, appresponse.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case appresponse.FieldID:
			values[i] = new(uuid.UUID)
		case appresponse.ForeignKeys[0]: // app_query_responses
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type AppResponse", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppResponse fields.
func (ar *AppResponse) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appresponse.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ar.ID = *value
			}
		case appresponse.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ar.CreatedAt = value.Time
			}
		case appresponse.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ar.UpdatedAt = value.Time
			}
		case appresponse.FieldResponsecode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field responsecode", values[i])
			} else if value.Valid {
				ar.Responsecode = value.String
			}
		case appresponse.FieldCodedescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field codedescription", values[i])
			} else if value.Valid {
				ar.Codedescription = value.String
			}
		case appresponse.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field app_query_responses", values[i])
			} else if value.Valid {
				ar.app_query_responses = new(uuid.UUID)
				*ar.app_query_responses = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryQuery queries the "query" edge of the AppResponse entity.
func (ar *AppResponse) QueryQuery() *AppQueryQuery {
	return (&AppResponseClient{config: ar.config}).QueryQuery(ar)
}

// Update returns a builder for updating this AppResponse.
// Note that you need to call AppResponse.Unwrap() before calling this method if this AppResponse
// was returned from a transaction, and the transaction was committed or rolled back.
func (ar *AppResponse) Update() *AppResponseUpdateOne {
	return (&AppResponseClient{config: ar.config}).UpdateOne(ar)
}

// Unwrap unwraps the AppResponse entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ar *AppResponse) Unwrap() *AppResponse {
	tx, ok := ar.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppResponse is not a transactional entity")
	}
	ar.config.driver = tx.drv
	return ar
}

// String implements the fmt.Stringer.
func (ar *AppResponse) String() string {
	var builder strings.Builder
	builder.WriteString("AppResponse(")
	builder.WriteString(fmt.Sprintf("id=%v", ar.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(ar.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(ar.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", responsecode=")
	builder.WriteString(ar.Responsecode)
	builder.WriteString(", codedescription=")
	builder.WriteString(ar.Codedescription)
	builder.WriteByte(')')
	return builder.String()
}

// AppResponses is a parsable slice of AppResponse.
type AppResponses []*AppResponse

func (ar AppResponses) config(cfg config) {
	for _i := range ar {
		ar[_i].config = cfg
	}
}
