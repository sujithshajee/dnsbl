// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

// Status of the task
type TaskStatus string

const (
	TaskStatusWaiting    TaskStatus = "WAITING"
	TaskStatusInProgress TaskStatus = "IN_PROGRESS"
	TaskStatusDone       TaskStatus = "DONE"
	TaskStatusError      TaskStatus = "ERROR"
)

var AllTaskStatus = []TaskStatus{
	TaskStatusWaiting,
	TaskStatusInProgress,
	TaskStatusDone,
	TaskStatusError,
}

func (e TaskStatus) IsValid() bool {
	switch e {
	case TaskStatusWaiting, TaskStatusInProgress, TaskStatusDone, TaskStatusError:
		return true
	}
	return false
}

func (e TaskStatus) String() string {
	return string(e)
}

func (e *TaskStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TaskStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TaskStatus", str)
	}
	return nil
}

func (e TaskStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Type of task being preformed
type TaskType string

const (
	TaskTypeIPDNSBl TaskType = "IPDNSBL"
)

var AllTaskType = []TaskType{
	TaskTypeIPDNSBl,
}

func (e TaskType) IsValid() bool {
	switch e {
	case TaskTypeIPDNSBl:
		return true
	}
	return false
}

func (e TaskType) String() string {
	return string(e)
}

func (e *TaskType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TaskType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TaskType", str)
	}
	return nil
}

func (e TaskType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
