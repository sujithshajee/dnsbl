// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/google/uuid"
	"github.com/sujithshajee/dnsbl/app/ent/appquery"
	"github.com/sujithshajee/dnsbl/app/ent/appresponse"
	"github.com/sujithshajee/dnsbl/app/ent/ip"
	"github.com/sujithshajee/dnsbl/app/ent/predicate"
	"github.com/sujithshajee/dnsbl/app/ent/task"
	"github.com/sujithshajee/dnsbl/app/ent/user"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAppQuery    = "AppQuery"
	TypeAppResponse = "AppResponse"
	TypeIP          = "IP"
	TypeTask        = "Task"
	TypeUser        = "User"
)

// AppQueryMutation represents an operation that mutates the AppQuery nodes in the graph.
type AppQueryMutation struct {
	config
	op               Op
	typ              string
	id               *uuid.UUID
	created_at       *time.Time
	updated_at       *time.Time
	clearedFields    map[string]struct{}
	responses        map[uuid.UUID]struct{}
	removedresponses map[uuid.UUID]struct{}
	clearedresponses bool
	ipaddress        *uuid.UUID
	clearedipaddress bool
	done             bool
	oldValue         func(context.Context) (*AppQuery, error)
	predicates       []predicate.AppQuery
}

var _ ent.Mutation = (*AppQueryMutation)(nil)

// appqueryOption allows management of the mutation configuration using functional options.
type appqueryOption func(*AppQueryMutation)

// newAppQueryMutation creates new mutation for the AppQuery entity.
func newAppQueryMutation(c config, op Op, opts ...appqueryOption) *AppQueryMutation {
	m := &AppQueryMutation{
		config:        c,
		op:            op,
		typ:           TypeAppQuery,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAppQueryID sets the ID field of the mutation.
func withAppQueryID(id uuid.UUID) appqueryOption {
	return func(m *AppQueryMutation) {
		var (
			err   error
			once  sync.Once
			value *AppQuery
		)
		m.oldValue = func(ctx context.Context) (*AppQuery, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AppQuery.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAppQuery sets the old AppQuery of the mutation.
func withAppQuery(node *AppQuery) appqueryOption {
	return func(m *AppQueryMutation) {
		m.oldValue = func(context.Context) (*AppQuery, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AppQueryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AppQueryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of AppQuery entities.
func (m *AppQueryMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AppQueryMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the "created_at" field.
func (m *AppQueryMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AppQueryMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the AppQuery entity.
// If the AppQuery object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppQueryMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AppQueryMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AppQueryMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AppQueryMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the AppQuery entity.
// If the AppQuery object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppQueryMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AppQueryMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddResponseIDs adds the "responses" edge to the AppResponse entity by ids.
func (m *AppQueryMutation) AddResponseIDs(ids ...uuid.UUID) {
	if m.responses == nil {
		m.responses = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.responses[ids[i]] = struct{}{}
	}
}

// ClearResponses clears the "responses" edge to the AppResponse entity.
func (m *AppQueryMutation) ClearResponses() {
	m.clearedresponses = true
}

// ResponsesCleared reports if the "responses" edge to the AppResponse entity was cleared.
func (m *AppQueryMutation) ResponsesCleared() bool {
	return m.clearedresponses
}

// RemoveResponseIDs removes the "responses" edge to the AppResponse entity by IDs.
func (m *AppQueryMutation) RemoveResponseIDs(ids ...uuid.UUID) {
	if m.removedresponses == nil {
		m.removedresponses = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.responses, ids[i])
		m.removedresponses[ids[i]] = struct{}{}
	}
}

// RemovedResponses returns the removed IDs of the "responses" edge to the AppResponse entity.
func (m *AppQueryMutation) RemovedResponsesIDs() (ids []uuid.UUID) {
	for id := range m.removedresponses {
		ids = append(ids, id)
	}
	return
}

// ResponsesIDs returns the "responses" edge IDs in the mutation.
func (m *AppQueryMutation) ResponsesIDs() (ids []uuid.UUID) {
	for id := range m.responses {
		ids = append(ids, id)
	}
	return
}

// ResetResponses resets all changes to the "responses" edge.
func (m *AppQueryMutation) ResetResponses() {
	m.responses = nil
	m.clearedresponses = false
	m.removedresponses = nil
}

// SetIpaddressID sets the "ipaddress" edge to the IP entity by id.
func (m *AppQueryMutation) SetIpaddressID(id uuid.UUID) {
	m.ipaddress = &id
}

// ClearIpaddress clears the "ipaddress" edge to the IP entity.
func (m *AppQueryMutation) ClearIpaddress() {
	m.clearedipaddress = true
}

// IpaddressCleared reports if the "ipaddress" edge to the IP entity was cleared.
func (m *AppQueryMutation) IpaddressCleared() bool {
	return m.clearedipaddress
}

// IpaddressID returns the "ipaddress" edge ID in the mutation.
func (m *AppQueryMutation) IpaddressID() (id uuid.UUID, exists bool) {
	if m.ipaddress != nil {
		return *m.ipaddress, true
	}
	return
}

// IpaddressIDs returns the "ipaddress" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// IpaddressID instead. It exists only for internal usage by the builders.
func (m *AppQueryMutation) IpaddressIDs() (ids []uuid.UUID) {
	if id := m.ipaddress; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetIpaddress resets all changes to the "ipaddress" edge.
func (m *AppQueryMutation) ResetIpaddress() {
	m.ipaddress = nil
	m.clearedipaddress = false
}

// Where appends a list predicates to the AppQueryMutation builder.
func (m *AppQueryMutation) Where(ps ...predicate.AppQuery) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AppQueryMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (AppQuery).
func (m *AppQueryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AppQueryMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.created_at != nil {
		fields = append(fields, appquery.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, appquery.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AppQueryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case appquery.FieldCreatedAt:
		return m.CreatedAt()
	case appquery.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AppQueryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case appquery.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case appquery.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown AppQuery field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AppQueryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case appquery.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case appquery.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown AppQuery field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AppQueryMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AppQueryMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AppQueryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown AppQuery numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AppQueryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AppQueryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AppQueryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown AppQuery nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AppQueryMutation) ResetField(name string) error {
	switch name {
	case appquery.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case appquery.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown AppQuery field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AppQueryMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.responses != nil {
		edges = append(edges, appquery.EdgeResponses)
	}
	if m.ipaddress != nil {
		edges = append(edges, appquery.EdgeIpaddress)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AppQueryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case appquery.EdgeResponses:
		ids := make([]ent.Value, 0, len(m.responses))
		for id := range m.responses {
			ids = append(ids, id)
		}
		return ids
	case appquery.EdgeIpaddress:
		if id := m.ipaddress; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AppQueryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedresponses != nil {
		edges = append(edges, appquery.EdgeResponses)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AppQueryMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case appquery.EdgeResponses:
		ids := make([]ent.Value, 0, len(m.removedresponses))
		for id := range m.removedresponses {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AppQueryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedresponses {
		edges = append(edges, appquery.EdgeResponses)
	}
	if m.clearedipaddress {
		edges = append(edges, appquery.EdgeIpaddress)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AppQueryMutation) EdgeCleared(name string) bool {
	switch name {
	case appquery.EdgeResponses:
		return m.clearedresponses
	case appquery.EdgeIpaddress:
		return m.clearedipaddress
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AppQueryMutation) ClearEdge(name string) error {
	switch name {
	case appquery.EdgeIpaddress:
		m.ClearIpaddress()
		return nil
	}
	return fmt.Errorf("unknown AppQuery unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AppQueryMutation) ResetEdge(name string) error {
	switch name {
	case appquery.EdgeResponses:
		m.ResetResponses()
		return nil
	case appquery.EdgeIpaddress:
		m.ResetIpaddress()
		return nil
	}
	return fmt.Errorf("unknown AppQuery edge %s", name)
}

// AppResponseMutation represents an operation that mutates the AppResponse nodes in the graph.
type AppResponseMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	created_at      *time.Time
	updated_at      *time.Time
	responsecode    *string
	codedescription *string
	clearedFields   map[string]struct{}
	query           *uuid.UUID
	clearedquery    bool
	done            bool
	oldValue        func(context.Context) (*AppResponse, error)
	predicates      []predicate.AppResponse
}

var _ ent.Mutation = (*AppResponseMutation)(nil)

// appresponseOption allows management of the mutation configuration using functional options.
type appresponseOption func(*AppResponseMutation)

// newAppResponseMutation creates new mutation for the AppResponse entity.
func newAppResponseMutation(c config, op Op, opts ...appresponseOption) *AppResponseMutation {
	m := &AppResponseMutation{
		config:        c,
		op:            op,
		typ:           TypeAppResponse,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAppResponseID sets the ID field of the mutation.
func withAppResponseID(id uuid.UUID) appresponseOption {
	return func(m *AppResponseMutation) {
		var (
			err   error
			once  sync.Once
			value *AppResponse
		)
		m.oldValue = func(ctx context.Context) (*AppResponse, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AppResponse.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAppResponse sets the old AppResponse of the mutation.
func withAppResponse(node *AppResponse) appresponseOption {
	return func(m *AppResponseMutation) {
		m.oldValue = func(context.Context) (*AppResponse, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AppResponseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AppResponseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of AppResponse entities.
func (m *AppResponseMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AppResponseMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the "created_at" field.
func (m *AppResponseMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AppResponseMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the AppResponse entity.
// If the AppResponse object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppResponseMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AppResponseMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AppResponseMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AppResponseMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the AppResponse entity.
// If the AppResponse object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppResponseMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AppResponseMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetResponsecode sets the "responsecode" field.
func (m *AppResponseMutation) SetResponsecode(s string) {
	m.responsecode = &s
}

// Responsecode returns the value of the "responsecode" field in the mutation.
func (m *AppResponseMutation) Responsecode() (r string, exists bool) {
	v := m.responsecode
	if v == nil {
		return
	}
	return *v, true
}

// OldResponsecode returns the old "responsecode" field's value of the AppResponse entity.
// If the AppResponse object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppResponseMutation) OldResponsecode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldResponsecode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldResponsecode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResponsecode: %w", err)
	}
	return oldValue.Responsecode, nil
}

// ResetResponsecode resets all changes to the "responsecode" field.
func (m *AppResponseMutation) ResetResponsecode() {
	m.responsecode = nil
}

// SetCodedescription sets the "codedescription" field.
func (m *AppResponseMutation) SetCodedescription(s string) {
	m.codedescription = &s
}

// Codedescription returns the value of the "codedescription" field in the mutation.
func (m *AppResponseMutation) Codedescription() (r string, exists bool) {
	v := m.codedescription
	if v == nil {
		return
	}
	return *v, true
}

// OldCodedescription returns the old "codedescription" field's value of the AppResponse entity.
// If the AppResponse object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppResponseMutation) OldCodedescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCodedescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCodedescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCodedescription: %w", err)
	}
	return oldValue.Codedescription, nil
}

// ResetCodedescription resets all changes to the "codedescription" field.
func (m *AppResponseMutation) ResetCodedescription() {
	m.codedescription = nil
}

// SetQueryID sets the "query" edge to the AppQuery entity by id.
func (m *AppResponseMutation) SetQueryID(id uuid.UUID) {
	m.query = &id
}

// ClearQuery clears the "query" edge to the AppQuery entity.
func (m *AppResponseMutation) ClearQuery() {
	m.clearedquery = true
}

// QueryCleared reports if the "query" edge to the AppQuery entity was cleared.
func (m *AppResponseMutation) QueryCleared() bool {
	return m.clearedquery
}

// QueryID returns the "query" edge ID in the mutation.
func (m *AppResponseMutation) QueryID() (id uuid.UUID, exists bool) {
	if m.query != nil {
		return *m.query, true
	}
	return
}

// QueryIDs returns the "query" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// QueryID instead. It exists only for internal usage by the builders.
func (m *AppResponseMutation) QueryIDs() (ids []uuid.UUID) {
	if id := m.query; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetQuery resets all changes to the "query" edge.
func (m *AppResponseMutation) ResetQuery() {
	m.query = nil
	m.clearedquery = false
}

// Where appends a list predicates to the AppResponseMutation builder.
func (m *AppResponseMutation) Where(ps ...predicate.AppResponse) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AppResponseMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (AppResponse).
func (m *AppResponseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AppResponseMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.created_at != nil {
		fields = append(fields, appresponse.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, appresponse.FieldUpdatedAt)
	}
	if m.responsecode != nil {
		fields = append(fields, appresponse.FieldResponsecode)
	}
	if m.codedescription != nil {
		fields = append(fields, appresponse.FieldCodedescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AppResponseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case appresponse.FieldCreatedAt:
		return m.CreatedAt()
	case appresponse.FieldUpdatedAt:
		return m.UpdatedAt()
	case appresponse.FieldResponsecode:
		return m.Responsecode()
	case appresponse.FieldCodedescription:
		return m.Codedescription()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AppResponseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case appresponse.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case appresponse.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case appresponse.FieldResponsecode:
		return m.OldResponsecode(ctx)
	case appresponse.FieldCodedescription:
		return m.OldCodedescription(ctx)
	}
	return nil, fmt.Errorf("unknown AppResponse field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AppResponseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case appresponse.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case appresponse.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case appresponse.FieldResponsecode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResponsecode(v)
		return nil
	case appresponse.FieldCodedescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCodedescription(v)
		return nil
	}
	return fmt.Errorf("unknown AppResponse field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AppResponseMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AppResponseMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AppResponseMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown AppResponse numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AppResponseMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AppResponseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AppResponseMutation) ClearField(name string) error {
	return fmt.Errorf("unknown AppResponse nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AppResponseMutation) ResetField(name string) error {
	switch name {
	case appresponse.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case appresponse.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case appresponse.FieldResponsecode:
		m.ResetResponsecode()
		return nil
	case appresponse.FieldCodedescription:
		m.ResetCodedescription()
		return nil
	}
	return fmt.Errorf("unknown AppResponse field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AppResponseMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.query != nil {
		edges = append(edges, appresponse.EdgeQuery)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AppResponseMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case appresponse.EdgeQuery:
		if id := m.query; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AppResponseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AppResponseMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AppResponseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedquery {
		edges = append(edges, appresponse.EdgeQuery)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AppResponseMutation) EdgeCleared(name string) bool {
	switch name {
	case appresponse.EdgeQuery:
		return m.clearedquery
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AppResponseMutation) ClearEdge(name string) error {
	switch name {
	case appresponse.EdgeQuery:
		m.ClearQuery()
		return nil
	}
	return fmt.Errorf("unknown AppResponse unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AppResponseMutation) ResetEdge(name string) error {
	switch name {
	case appresponse.EdgeQuery:
		m.ResetQuery()
		return nil
	}
	return fmt.Errorf("unknown AppResponse edge %s", name)
}

// IPMutation represents an operation that mutates the IP nodes in the graph.
type IPMutation struct {
	config
	op             Op
	typ            string
	id             *uuid.UUID
	created_at     *time.Time
	updated_at     *time.Time
	ip_address     *string
	clearedFields  map[string]struct{}
	queries        map[uuid.UUID]struct{}
	removedqueries map[uuid.UUID]struct{}
	clearedqueries bool
	done           bool
	oldValue       func(context.Context) (*IP, error)
	predicates     []predicate.IP
}

var _ ent.Mutation = (*IPMutation)(nil)

// ipOption allows management of the mutation configuration using functional options.
type ipOption func(*IPMutation)

// newIPMutation creates new mutation for the IP entity.
func newIPMutation(c config, op Op, opts ...ipOption) *IPMutation {
	m := &IPMutation{
		config:        c,
		op:            op,
		typ:           TypeIP,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withIPID sets the ID field of the mutation.
func withIPID(id uuid.UUID) ipOption {
	return func(m *IPMutation) {
		var (
			err   error
			once  sync.Once
			value *IP
		)
		m.oldValue = func(ctx context.Context) (*IP, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().IP.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withIP sets the old IP of the mutation.
func withIP(node *IP) ipOption {
	return func(m *IPMutation) {
		m.oldValue = func(context.Context) (*IP, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m IPMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m IPMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of IP entities.
func (m *IPMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *IPMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the "created_at" field.
func (m *IPMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *IPMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the IP entity.
// If the IP object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IPMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *IPMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *IPMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *IPMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the IP entity.
// If the IP object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IPMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *IPMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetIPAddress sets the "ip_address" field.
func (m *IPMutation) SetIPAddress(s string) {
	m.ip_address = &s
}

// IPAddress returns the value of the "ip_address" field in the mutation.
func (m *IPMutation) IPAddress() (r string, exists bool) {
	v := m.ip_address
	if v == nil {
		return
	}
	return *v, true
}

// OldIPAddress returns the old "ip_address" field's value of the IP entity.
// If the IP object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IPMutation) OldIPAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIPAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIPAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIPAddress: %w", err)
	}
	return oldValue.IPAddress, nil
}

// ResetIPAddress resets all changes to the "ip_address" field.
func (m *IPMutation) ResetIPAddress() {
	m.ip_address = nil
}

// AddQueryIDs adds the "queries" edge to the AppQuery entity by ids.
func (m *IPMutation) AddQueryIDs(ids ...uuid.UUID) {
	if m.queries == nil {
		m.queries = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.queries[ids[i]] = struct{}{}
	}
}

// ClearQueries clears the "queries" edge to the AppQuery entity.
func (m *IPMutation) ClearQueries() {
	m.clearedqueries = true
}

// QueriesCleared reports if the "queries" edge to the AppQuery entity was cleared.
func (m *IPMutation) QueriesCleared() bool {
	return m.clearedqueries
}

// RemoveQueryIDs removes the "queries" edge to the AppQuery entity by IDs.
func (m *IPMutation) RemoveQueryIDs(ids ...uuid.UUID) {
	if m.removedqueries == nil {
		m.removedqueries = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.queries, ids[i])
		m.removedqueries[ids[i]] = struct{}{}
	}
}

// RemovedQueries returns the removed IDs of the "queries" edge to the AppQuery entity.
func (m *IPMutation) RemovedQueriesIDs() (ids []uuid.UUID) {
	for id := range m.removedqueries {
		ids = append(ids, id)
	}
	return
}

// QueriesIDs returns the "queries" edge IDs in the mutation.
func (m *IPMutation) QueriesIDs() (ids []uuid.UUID) {
	for id := range m.queries {
		ids = append(ids, id)
	}
	return
}

// ResetQueries resets all changes to the "queries" edge.
func (m *IPMutation) ResetQueries() {
	m.queries = nil
	m.clearedqueries = false
	m.removedqueries = nil
}

// Where appends a list predicates to the IPMutation builder.
func (m *IPMutation) Where(ps ...predicate.IP) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *IPMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (IP).
func (m *IPMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *IPMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.created_at != nil {
		fields = append(fields, ip.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, ip.FieldUpdatedAt)
	}
	if m.ip_address != nil {
		fields = append(fields, ip.FieldIPAddress)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *IPMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case ip.FieldCreatedAt:
		return m.CreatedAt()
	case ip.FieldUpdatedAt:
		return m.UpdatedAt()
	case ip.FieldIPAddress:
		return m.IPAddress()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *IPMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case ip.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case ip.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case ip.FieldIPAddress:
		return m.OldIPAddress(ctx)
	}
	return nil, fmt.Errorf("unknown IP field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IPMutation) SetField(name string, value ent.Value) error {
	switch name {
	case ip.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case ip.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case ip.FieldIPAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIPAddress(v)
		return nil
	}
	return fmt.Errorf("unknown IP field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *IPMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *IPMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IPMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown IP numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *IPMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *IPMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *IPMutation) ClearField(name string) error {
	return fmt.Errorf("unknown IP nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *IPMutation) ResetField(name string) error {
	switch name {
	case ip.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case ip.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case ip.FieldIPAddress:
		m.ResetIPAddress()
		return nil
	}
	return fmt.Errorf("unknown IP field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *IPMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.queries != nil {
		edges = append(edges, ip.EdgeQueries)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *IPMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case ip.EdgeQueries:
		ids := make([]ent.Value, 0, len(m.queries))
		for id := range m.queries {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *IPMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedqueries != nil {
		edges = append(edges, ip.EdgeQueries)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *IPMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case ip.EdgeQueries:
		ids := make([]ent.Value, 0, len(m.removedqueries))
		for id := range m.removedqueries {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *IPMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedqueries {
		edges = append(edges, ip.EdgeQueries)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *IPMutation) EdgeCleared(name string) bool {
	switch name {
	case ip.EdgeQueries:
		return m.clearedqueries
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *IPMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown IP unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *IPMutation) ResetEdge(name string) error {
	switch name {
	case ip.EdgeQueries:
		m.ResetQueries()
		return nil
	}
	return fmt.Errorf("unknown IP edge %s", name)
}

// TaskMutation represents an operation that mutates the Task nodes in the graph.
type TaskMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *time.Time
	updated_at    *time.Time
	_type         *task.Type
	ipaddress     *string
	status        *task.Status
	error         *string
	completed_by  *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Task, error)
	predicates    []predicate.Task
}

var _ ent.Mutation = (*TaskMutation)(nil)

// taskOption allows management of the mutation configuration using functional options.
type taskOption func(*TaskMutation)

// newTaskMutation creates new mutation for the Task entity.
func newTaskMutation(c config, op Op, opts ...taskOption) *TaskMutation {
	m := &TaskMutation{
		config:        c,
		op:            op,
		typ:           TypeTask,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTaskID sets the ID field of the mutation.
func withTaskID(id uuid.UUID) taskOption {
	return func(m *TaskMutation) {
		var (
			err   error
			once  sync.Once
			value *Task
		)
		m.oldValue = func(ctx context.Context) (*Task, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Task.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTask sets the old Task of the mutation.
func withTask(node *Task) taskOption {
	return func(m *TaskMutation) {
		m.oldValue = func(context.Context) (*Task, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TaskMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TaskMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Task entities.
func (m *TaskMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TaskMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the "created_at" field.
func (m *TaskMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TaskMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TaskMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TaskMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TaskMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TaskMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetType sets the "type" field.
func (m *TaskMutation) SetType(t task.Type) {
	m._type = &t
}

// GetType returns the value of the "type" field in the mutation.
func (m *TaskMutation) GetType() (r task.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldType(ctx context.Context) (v task.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *TaskMutation) ResetType() {
	m._type = nil
}

// SetIpaddress sets the "ipaddress" field.
func (m *TaskMutation) SetIpaddress(s string) {
	m.ipaddress = &s
}

// Ipaddress returns the value of the "ipaddress" field in the mutation.
func (m *TaskMutation) Ipaddress() (r string, exists bool) {
	v := m.ipaddress
	if v == nil {
		return
	}
	return *v, true
}

// OldIpaddress returns the old "ipaddress" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldIpaddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIpaddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIpaddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIpaddress: %w", err)
	}
	return oldValue.Ipaddress, nil
}

// ClearIpaddress clears the value of the "ipaddress" field.
func (m *TaskMutation) ClearIpaddress() {
	m.ipaddress = nil
	m.clearedFields[task.FieldIpaddress] = struct{}{}
}

// IpaddressCleared returns if the "ipaddress" field was cleared in this mutation.
func (m *TaskMutation) IpaddressCleared() bool {
	_, ok := m.clearedFields[task.FieldIpaddress]
	return ok
}

// ResetIpaddress resets all changes to the "ipaddress" field.
func (m *TaskMutation) ResetIpaddress() {
	m.ipaddress = nil
	delete(m.clearedFields, task.FieldIpaddress)
}

// SetStatus sets the "status" field.
func (m *TaskMutation) SetStatus(t task.Status) {
	m.status = &t
}

// Status returns the value of the "status" field in the mutation.
func (m *TaskMutation) Status() (r task.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldStatus(ctx context.Context) (v task.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *TaskMutation) ResetStatus() {
	m.status = nil
}

// SetError sets the "error" field.
func (m *TaskMutation) SetError(s string) {
	m.error = &s
}

// Error returns the value of the "error" field in the mutation.
func (m *TaskMutation) Error() (r string, exists bool) {
	v := m.error
	if v == nil {
		return
	}
	return *v, true
}

// OldError returns the old "error" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldError(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldError is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldError requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldError: %w", err)
	}
	return oldValue.Error, nil
}

// ClearError clears the value of the "error" field.
func (m *TaskMutation) ClearError() {
	m.error = nil
	m.clearedFields[task.FieldError] = struct{}{}
}

// ErrorCleared returns if the "error" field was cleared in this mutation.
func (m *TaskMutation) ErrorCleared() bool {
	_, ok := m.clearedFields[task.FieldError]
	return ok
}

// ResetError resets all changes to the "error" field.
func (m *TaskMutation) ResetError() {
	m.error = nil
	delete(m.clearedFields, task.FieldError)
}

// SetCompletedBy sets the "completed_by" field.
func (m *TaskMutation) SetCompletedBy(t time.Time) {
	m.completed_by = &t
}

// CompletedBy returns the value of the "completed_by" field in the mutation.
func (m *TaskMutation) CompletedBy() (r time.Time, exists bool) {
	v := m.completed_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCompletedBy returns the old "completed_by" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldCompletedBy(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCompletedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCompletedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCompletedBy: %w", err)
	}
	return oldValue.CompletedBy, nil
}

// ClearCompletedBy clears the value of the "completed_by" field.
func (m *TaskMutation) ClearCompletedBy() {
	m.completed_by = nil
	m.clearedFields[task.FieldCompletedBy] = struct{}{}
}

// CompletedByCleared returns if the "completed_by" field was cleared in this mutation.
func (m *TaskMutation) CompletedByCleared() bool {
	_, ok := m.clearedFields[task.FieldCompletedBy]
	return ok
}

// ResetCompletedBy resets all changes to the "completed_by" field.
func (m *TaskMutation) ResetCompletedBy() {
	m.completed_by = nil
	delete(m.clearedFields, task.FieldCompletedBy)
}

// Where appends a list predicates to the TaskMutation builder.
func (m *TaskMutation) Where(ps ...predicate.Task) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TaskMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Task).
func (m *TaskMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TaskMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, task.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, task.FieldUpdatedAt)
	}
	if m._type != nil {
		fields = append(fields, task.FieldType)
	}
	if m.ipaddress != nil {
		fields = append(fields, task.FieldIpaddress)
	}
	if m.status != nil {
		fields = append(fields, task.FieldStatus)
	}
	if m.error != nil {
		fields = append(fields, task.FieldError)
	}
	if m.completed_by != nil {
		fields = append(fields, task.FieldCompletedBy)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TaskMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case task.FieldCreatedAt:
		return m.CreatedAt()
	case task.FieldUpdatedAt:
		return m.UpdatedAt()
	case task.FieldType:
		return m.GetType()
	case task.FieldIpaddress:
		return m.Ipaddress()
	case task.FieldStatus:
		return m.Status()
	case task.FieldError:
		return m.Error()
	case task.FieldCompletedBy:
		return m.CompletedBy()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TaskMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case task.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case task.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case task.FieldType:
		return m.OldType(ctx)
	case task.FieldIpaddress:
		return m.OldIpaddress(ctx)
	case task.FieldStatus:
		return m.OldStatus(ctx)
	case task.FieldError:
		return m.OldError(ctx)
	case task.FieldCompletedBy:
		return m.OldCompletedBy(ctx)
	}
	return nil, fmt.Errorf("unknown Task field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskMutation) SetField(name string, value ent.Value) error {
	switch name {
	case task.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case task.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case task.FieldType:
		v, ok := value.(task.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case task.FieldIpaddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIpaddress(v)
		return nil
	case task.FieldStatus:
		v, ok := value.(task.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case task.FieldError:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetError(v)
		return nil
	case task.FieldCompletedBy:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCompletedBy(v)
		return nil
	}
	return fmt.Errorf("unknown Task field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TaskMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TaskMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Task numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TaskMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(task.FieldIpaddress) {
		fields = append(fields, task.FieldIpaddress)
	}
	if m.FieldCleared(task.FieldError) {
		fields = append(fields, task.FieldError)
	}
	if m.FieldCleared(task.FieldCompletedBy) {
		fields = append(fields, task.FieldCompletedBy)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TaskMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TaskMutation) ClearField(name string) error {
	switch name {
	case task.FieldIpaddress:
		m.ClearIpaddress()
		return nil
	case task.FieldError:
		m.ClearError()
		return nil
	case task.FieldCompletedBy:
		m.ClearCompletedBy()
		return nil
	}
	return fmt.Errorf("unknown Task nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TaskMutation) ResetField(name string) error {
	switch name {
	case task.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case task.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case task.FieldType:
		m.ResetType()
		return nil
	case task.FieldIpaddress:
		m.ResetIpaddress()
		return nil
	case task.FieldStatus:
		m.ResetStatus()
		return nil
	case task.FieldError:
		m.ResetError()
		return nil
	case task.FieldCompletedBy:
		m.ResetCompletedBy()
		return nil
	}
	return fmt.Errorf("unknown Task field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TaskMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TaskMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TaskMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TaskMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TaskMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TaskMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TaskMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Task unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TaskMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Task edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *time.Time
	updated_at    *time.Time
	username      *string
	password      *[]byte
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(b []byte) {
	m.password = &b
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r []byte, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	case user.FieldUsername:
		return m.Username()
	case user.FieldPassword:
		return m.Password()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldPassword:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
