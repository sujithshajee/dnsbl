// Code generated by entc, DO NOT EDIT.

package appresponse

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/sujithshajee/dnsbl/app/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.AppResponse {
	return predicate.AppResponse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.AppResponse {
	return predicate.AppResponse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.AppResponse {
	return predicate.AppResponse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.AppResponse {
	return predicate.AppResponse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.AppResponse {
	return predicate.AppResponse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.AppResponse {
	return predicate.AppResponse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.AppResponse {
	return predicate.AppResponse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.AppResponse {
	return predicate.AppResponse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.AppResponse {
	return predicate.AppResponse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AppResponse {
	return predicate.AppResponse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.AppResponse {
	return predicate.AppResponse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// Responsecode applies equality check predicate on the "responsecode" field. It's identical to ResponsecodeEQ.
func Responsecode(v string) predicate.AppResponse {
	return predicate.AppResponse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResponsecode), v))
	})
}

// Codedescription applies equality check predicate on the "codedescription" field. It's identical to CodedescriptionEQ.
func Codedescription(v string) predicate.AppResponse {
	return predicate.AppResponse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCodedescription), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.AppResponse {
	return predicate.AppResponse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.AppResponse {
	return predicate.AppResponse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.AppResponse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppResponse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AppResponse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppResponse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.AppResponse {
	return predicate.AppResponse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.AppResponse {
	return predicate.AppResponse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.AppResponse {
	return predicate.AppResponse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.AppResponse {
	return predicate.AppResponse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.AppResponse {
	return predicate.AppResponse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.AppResponse {
	return predicate.AppResponse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.AppResponse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppResponse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.AppResponse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppResponse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.AppResponse {
	return predicate.AppResponse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.AppResponse {
	return predicate.AppResponse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.AppResponse {
	return predicate.AppResponse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.AppResponse {
	return predicate.AppResponse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// ResponsecodeEQ applies the EQ predicate on the "responsecode" field.
func ResponsecodeEQ(v string) predicate.AppResponse {
	return predicate.AppResponse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResponsecode), v))
	})
}

// ResponsecodeNEQ applies the NEQ predicate on the "responsecode" field.
func ResponsecodeNEQ(v string) predicate.AppResponse {
	return predicate.AppResponse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldResponsecode), v))
	})
}

// ResponsecodeIn applies the In predicate on the "responsecode" field.
func ResponsecodeIn(vs ...string) predicate.AppResponse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppResponse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldResponsecode), v...))
	})
}

// ResponsecodeNotIn applies the NotIn predicate on the "responsecode" field.
func ResponsecodeNotIn(vs ...string) predicate.AppResponse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppResponse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldResponsecode), v...))
	})
}

// ResponsecodeGT applies the GT predicate on the "responsecode" field.
func ResponsecodeGT(v string) predicate.AppResponse {
	return predicate.AppResponse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldResponsecode), v))
	})
}

// ResponsecodeGTE applies the GTE predicate on the "responsecode" field.
func ResponsecodeGTE(v string) predicate.AppResponse {
	return predicate.AppResponse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldResponsecode), v))
	})
}

// ResponsecodeLT applies the LT predicate on the "responsecode" field.
func ResponsecodeLT(v string) predicate.AppResponse {
	return predicate.AppResponse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldResponsecode), v))
	})
}

// ResponsecodeLTE applies the LTE predicate on the "responsecode" field.
func ResponsecodeLTE(v string) predicate.AppResponse {
	return predicate.AppResponse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldResponsecode), v))
	})
}

// ResponsecodeContains applies the Contains predicate on the "responsecode" field.
func ResponsecodeContains(v string) predicate.AppResponse {
	return predicate.AppResponse(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldResponsecode), v))
	})
}

// ResponsecodeHasPrefix applies the HasPrefix predicate on the "responsecode" field.
func ResponsecodeHasPrefix(v string) predicate.AppResponse {
	return predicate.AppResponse(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldResponsecode), v))
	})
}

// ResponsecodeHasSuffix applies the HasSuffix predicate on the "responsecode" field.
func ResponsecodeHasSuffix(v string) predicate.AppResponse {
	return predicate.AppResponse(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldResponsecode), v))
	})
}

// ResponsecodeEqualFold applies the EqualFold predicate on the "responsecode" field.
func ResponsecodeEqualFold(v string) predicate.AppResponse {
	return predicate.AppResponse(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldResponsecode), v))
	})
}

// ResponsecodeContainsFold applies the ContainsFold predicate on the "responsecode" field.
func ResponsecodeContainsFold(v string) predicate.AppResponse {
	return predicate.AppResponse(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldResponsecode), v))
	})
}

// CodedescriptionEQ applies the EQ predicate on the "codedescription" field.
func CodedescriptionEQ(v string) predicate.AppResponse {
	return predicate.AppResponse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCodedescription), v))
	})
}

// CodedescriptionNEQ applies the NEQ predicate on the "codedescription" field.
func CodedescriptionNEQ(v string) predicate.AppResponse {
	return predicate.AppResponse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCodedescription), v))
	})
}

// CodedescriptionIn applies the In predicate on the "codedescription" field.
func CodedescriptionIn(vs ...string) predicate.AppResponse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppResponse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCodedescription), v...))
	})
}

// CodedescriptionNotIn applies the NotIn predicate on the "codedescription" field.
func CodedescriptionNotIn(vs ...string) predicate.AppResponse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppResponse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCodedescription), v...))
	})
}

// CodedescriptionGT applies the GT predicate on the "codedescription" field.
func CodedescriptionGT(v string) predicate.AppResponse {
	return predicate.AppResponse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCodedescription), v))
	})
}

// CodedescriptionGTE applies the GTE predicate on the "codedescription" field.
func CodedescriptionGTE(v string) predicate.AppResponse {
	return predicate.AppResponse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCodedescription), v))
	})
}

// CodedescriptionLT applies the LT predicate on the "codedescription" field.
func CodedescriptionLT(v string) predicate.AppResponse {
	return predicate.AppResponse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCodedescription), v))
	})
}

// CodedescriptionLTE applies the LTE predicate on the "codedescription" field.
func CodedescriptionLTE(v string) predicate.AppResponse {
	return predicate.AppResponse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCodedescription), v))
	})
}

// CodedescriptionContains applies the Contains predicate on the "codedescription" field.
func CodedescriptionContains(v string) predicate.AppResponse {
	return predicate.AppResponse(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCodedescription), v))
	})
}

// CodedescriptionHasPrefix applies the HasPrefix predicate on the "codedescription" field.
func CodedescriptionHasPrefix(v string) predicate.AppResponse {
	return predicate.AppResponse(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCodedescription), v))
	})
}

// CodedescriptionHasSuffix applies the HasSuffix predicate on the "codedescription" field.
func CodedescriptionHasSuffix(v string) predicate.AppResponse {
	return predicate.AppResponse(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCodedescription), v))
	})
}

// CodedescriptionEqualFold applies the EqualFold predicate on the "codedescription" field.
func CodedescriptionEqualFold(v string) predicate.AppResponse {
	return predicate.AppResponse(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCodedescription), v))
	})
}

// CodedescriptionContainsFold applies the ContainsFold predicate on the "codedescription" field.
func CodedescriptionContainsFold(v string) predicate.AppResponse {
	return predicate.AppResponse(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCodedescription), v))
	})
}

// HasQuery applies the HasEdge predicate on the "query" edge.
func HasQuery() predicate.AppResponse {
	return predicate.AppResponse(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(QueryTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, QueryTable, QueryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasQueryWith applies the HasEdge predicate on the "query" edge with a given conditions (other predicates).
func HasQueryWith(preds ...predicate.AppQuery) predicate.AppResponse {
	return predicate.AppResponse(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(QueryInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, QueryTable, QueryColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AppResponse) predicate.AppResponse {
	return predicate.AppResponse(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AppResponse) predicate.AppResponse {
	return predicate.AppResponse(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AppResponse) predicate.AppResponse {
	return predicate.AppResponse(func(s *sql.Selector) {
		p(s.Not())
	})
}
