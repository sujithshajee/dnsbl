// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/sujithshajee/dnsbl/app/ent/appquery"
	"github.com/sujithshajee/dnsbl/app/ent/ip"
)

// AppQuery is the model entity for the AppQuery schema.
type AppQuery struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AppQueryQuery when eager-loading is set.
	Edges      AppQueryEdges `json:"edges"`
	ip_queries *uuid.UUID
}

// AppQueryEdges holds the relations/edges for other nodes in the graph.
type AppQueryEdges struct {
	// Responses holds the value of the responses edge.
	Responses []*AppResponse `json:"responses,omitempty"`
	// Ipaddress holds the value of the ipaddress edge.
	Ipaddress *IP `json:"ipaddress,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ResponsesOrErr returns the Responses value or an error if the edge
// was not loaded in eager-loading.
func (e AppQueryEdges) ResponsesOrErr() ([]*AppResponse, error) {
	if e.loadedTypes[0] {
		return e.Responses, nil
	}
	return nil, &NotLoadedError{edge: "responses"}
}

// IpaddressOrErr returns the Ipaddress value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AppQueryEdges) IpaddressOrErr() (*IP, error) {
	if e.loadedTypes[1] {
		if e.Ipaddress == nil {
			// The edge ipaddress was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: ip.Label}
		}
		return e.Ipaddress, nil
	}
	return nil, &NotLoadedError{edge: "ipaddress"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppQuery) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case appquery.FieldCreatedAt, appquery.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case appquery.FieldID:
			values[i] = new(uuid.UUID)
		case appquery.ForeignKeys[0]: // ip_queries
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type AppQuery", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppQuery fields.
func (aq *AppQuery) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appquery.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				aq.ID = *value
			}
		case appquery.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				aq.CreatedAt = value.Time
			}
		case appquery.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				aq.UpdatedAt = value.Time
			}
		case appquery.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field ip_queries", values[i])
			} else if value.Valid {
				aq.ip_queries = new(uuid.UUID)
				*aq.ip_queries = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryResponses queries the "responses" edge of the AppQuery entity.
func (aq *AppQuery) QueryResponses() *AppResponseQuery {
	return (&AppQueryClient{config: aq.config}).QueryResponses(aq)
}

// QueryIpaddress queries the "ipaddress" edge of the AppQuery entity.
func (aq *AppQuery) QueryIpaddress() *IPQuery {
	return (&AppQueryClient{config: aq.config}).QueryIpaddress(aq)
}

// Update returns a builder for updating this AppQuery.
// Note that you need to call AppQuery.Unwrap() before calling this method if this AppQuery
// was returned from a transaction, and the transaction was committed or rolled back.
func (aq *AppQuery) Update() *AppQueryUpdateOne {
	return (&AppQueryClient{config: aq.config}).UpdateOne(aq)
}

// Unwrap unwraps the AppQuery entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (aq *AppQuery) Unwrap() *AppQuery {
	tx, ok := aq.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppQuery is not a transactional entity")
	}
	aq.config.driver = tx.drv
	return aq
}

// String implements the fmt.Stringer.
func (aq *AppQuery) String() string {
	var builder strings.Builder
	builder.WriteString("AppQuery(")
	builder.WriteString(fmt.Sprintf("id=%v", aq.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(aq.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(aq.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AppQueries is a parsable slice of AppQuery.
type AppQueries []*AppQuery

func (aq AppQueries) config(cfg config) {
	for _i := range aq {
		aq[_i].config = cfg
	}
}
