interface Node {
  id: ID!
}

scalar Time
scalar UUID

type IP implements Node {
  id: ID!
  created_at: Time!
  updated_at: Time!
  response_code: String!
  ip_address: String!
}

type AppResponse implements Node {
  id: ID!
  created_at: Time!
  updated_at: Time!
  query: AppQuery!
  response_code: String!
  description: String!
}

scalar Cursor

type AppQuery implements Node {
  id: ID!
  created_at: Time!
  updated_at: Time!
  ip: IP!
}

type Query {
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
  getIPDetails(ip: String!): IP
}

type Mutation {
  enqueue(ip: [String!]): [Task]
}

type Task implements Node {
  id: ID!
  type: TaskType!
  ip_address: String!
  status: TaskStatus!
  error: String
}

enum TaskType {
  IPDNSBL
}

enum TaskStatus {
  WAITING
  IN_PROGRESS
  DONE
  ERROR
}