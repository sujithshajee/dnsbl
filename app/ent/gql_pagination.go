// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/base64"
	"errors"
	"fmt"
	"io"
	"strconv"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/google/uuid"
	"github.com/sujithshajee/dnsbl/app/ent/appquery"
	"github.com/sujithshajee/dnsbl/app/ent/appresponse"
	"github.com/sujithshajee/dnsbl/app/ent/ip"
	"github.com/sujithshajee/dnsbl/app/ent/task"
	"github.com/sujithshajee/dnsbl/app/ent/user"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"github.com/vmihailenco/msgpack/v5"
)

// OrderDirection defines the directions in which to order a list of items.
type OrderDirection string

const (
	// OrderDirectionAsc specifies an ascending order.
	OrderDirectionAsc OrderDirection = "ASC"
	// OrderDirectionDesc specifies a descending order.
	OrderDirectionDesc OrderDirection = "DESC"
)

// Validate the order direction value.
func (o OrderDirection) Validate() error {
	if o != OrderDirectionAsc && o != OrderDirectionDesc {
		return fmt.Errorf("%s is not a valid OrderDirection", o)
	}
	return nil
}

// String implements fmt.Stringer interface.
func (o OrderDirection) String() string {
	return string(o)
}

// MarshalGQL implements graphql.Marshaler interface.
func (o OrderDirection) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(o.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (o *OrderDirection) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("order direction %T must be a string", val)
	}
	*o = OrderDirection(str)
	return o.Validate()
}

func (o OrderDirection) reverse() OrderDirection {
	if o == OrderDirectionDesc {
		return OrderDirectionAsc
	}
	return OrderDirectionDesc
}

func (o OrderDirection) orderFunc(field string) OrderFunc {
	if o == OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

func cursorsToPredicates(direction OrderDirection, after, before *Cursor, field, idField string) []func(s *sql.Selector) {
	var predicates []func(s *sql.Selector)
	if after != nil {
		if after.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeGT
			} else {
				predicate = sql.CompositeLT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					after.Value, after.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.GT
			} else {
				predicate = sql.LT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					after.ID,
				))
			})
		}
	}
	if before != nil {
		if before.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeLT
			} else {
				predicate = sql.CompositeGT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					before.Value, before.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.LT
			} else {
				predicate = sql.GT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					before.ID,
				))
			})
		}
	}
	return predicates
}

// PageInfo of a connection type.
type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *Cursor `json:"startCursor"`
	EndCursor       *Cursor `json:"endCursor"`
}

// Cursor of an edge type.
type Cursor struct {
	ID    uuid.UUID `msgpack:"i"`
	Value Value     `msgpack:"v,omitempty"`
}

// MarshalGQL implements graphql.Marshaler interface.
func (c Cursor) MarshalGQL(w io.Writer) {
	quote := []byte{'"'}
	w.Write(quote)
	defer w.Write(quote)
	wc := base64.NewEncoder(base64.RawStdEncoding, w)
	defer wc.Close()
	_ = msgpack.NewEncoder(wc).Encode(c)
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (c *Cursor) UnmarshalGQL(v interface{}) error {
	s, ok := v.(string)
	if !ok {
		return fmt.Errorf("%T is not a string", v)
	}
	if err := msgpack.NewDecoder(
		base64.NewDecoder(
			base64.RawStdEncoding,
			strings.NewReader(s),
		),
	).Decode(c); err != nil {
		return fmt.Errorf("cannot decode cursor: %w", err)
	}
	return nil
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func getCollectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	field := fc.Field

walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Name == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return getCollectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

// AppQueryEdge is the edge representation of AppQuery.
type AppQueryEdge struct {
	Node   *AppQuery `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// AppQueryConnection is the connection containing edges to AppQuery.
type AppQueryConnection struct {
	Edges      []*AppQueryEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

// AppQueryPaginateOption enables pagination customization.
type AppQueryPaginateOption func(*appQueryPager) error

// WithAppQueryOrder configures pagination ordering.
func WithAppQueryOrder(order *AppQueryOrder) AppQueryPaginateOption {
	if order == nil {
		order = DefaultAppQueryOrder
	}
	o := *order
	return func(pager *appQueryPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultAppQueryOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithAppQueryFilter configures pagination filter.
func WithAppQueryFilter(filter func(*AppQueryQuery) (*AppQueryQuery, error)) AppQueryPaginateOption {
	return func(pager *appQueryPager) error {
		if filter == nil {
			return errors.New("AppQueryQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type appQueryPager struct {
	order  *AppQueryOrder
	filter func(*AppQueryQuery) (*AppQueryQuery, error)
}

func newAppQueryPager(opts []AppQueryPaginateOption) (*appQueryPager, error) {
	pager := &appQueryPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultAppQueryOrder
	}
	return pager, nil
}

func (p *appQueryPager) applyFilter(query *AppQueryQuery) (*AppQueryQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *appQueryPager) toCursor(aq *AppQuery) Cursor {
	return p.order.Field.toCursor(aq)
}

func (p *appQueryPager) applyCursors(query *AppQueryQuery, after, before *Cursor) *AppQueryQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultAppQueryOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *appQueryPager) applyOrder(query *AppQueryQuery, reverse bool) *AppQueryQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultAppQueryOrder.Field {
		query = query.Order(direction.orderFunc(DefaultAppQueryOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to AppQuery.
func (aq *AppQueryQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...AppQueryPaginateOption,
) (*AppQueryConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newAppQueryPager(opts)
	if err != nil {
		return nil, err
	}

	if aq, err = pager.applyFilter(aq); err != nil {
		return nil, err
	}

	conn := &AppQueryConnection{Edges: []*AppQueryEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := aq.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := aq.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	aq = pager.applyCursors(aq, after, before)
	aq = pager.applyOrder(aq, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		aq = aq.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		aq = aq.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := aq.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *AppQuery
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *AppQuery {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *AppQuery {
			return nodes[i]
		}
	}

	conn.Edges = make([]*AppQueryEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &AppQueryEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

var (
	// AppQueryOrderFieldCreatedAt orders AppQuery by created_at.
	AppQueryOrderFieldCreatedAt = &AppQueryOrderField{
		field: appquery.FieldCreatedAt,
		toCursor: func(aq *AppQuery) Cursor {
			return Cursor{
				ID:    aq.ID,
				Value: aq.CreatedAt,
			}
		},
	}
	// AppQueryOrderFieldUpdatedAt orders AppQuery by updated_at.
	AppQueryOrderFieldUpdatedAt = &AppQueryOrderField{
		field: appquery.FieldUpdatedAt,
		toCursor: func(aq *AppQuery) Cursor {
			return Cursor{
				ID:    aq.ID,
				Value: aq.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f AppQueryOrderField) String() string {
	var str string
	switch f.field {
	case appquery.FieldCreatedAt:
		str = "CREATED_AT"
	case appquery.FieldUpdatedAt:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f AppQueryOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *AppQueryOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("AppQueryOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *AppQueryOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *AppQueryOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid AppQueryOrderField", str)
	}
	return nil
}

// AppQueryOrderField defines the ordering field of AppQuery.
type AppQueryOrderField struct {
	field    string
	toCursor func(*AppQuery) Cursor
}

// AppQueryOrder defines the ordering of AppQuery.
type AppQueryOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *AppQueryOrderField `json:"field"`
}

// DefaultAppQueryOrder is the default ordering of AppQuery.
var DefaultAppQueryOrder = &AppQueryOrder{
	Direction: OrderDirectionAsc,
	Field: &AppQueryOrderField{
		field: appquery.FieldID,
		toCursor: func(aq *AppQuery) Cursor {
			return Cursor{ID: aq.ID}
		},
	},
}

// ToEdge converts AppQuery into AppQueryEdge.
func (aq *AppQuery) ToEdge(order *AppQueryOrder) *AppQueryEdge {
	if order == nil {
		order = DefaultAppQueryOrder
	}
	return &AppQueryEdge{
		Node:   aq,
		Cursor: order.Field.toCursor(aq),
	}
}

// AppResponseEdge is the edge representation of AppResponse.
type AppResponseEdge struct {
	Node   *AppResponse `json:"node"`
	Cursor Cursor       `json:"cursor"`
}

// AppResponseConnection is the connection containing edges to AppResponse.
type AppResponseConnection struct {
	Edges      []*AppResponseEdge `json:"edges"`
	PageInfo   PageInfo           `json:"pageInfo"`
	TotalCount int                `json:"totalCount"`
}

// AppResponsePaginateOption enables pagination customization.
type AppResponsePaginateOption func(*appResponsePager) error

// WithAppResponseOrder configures pagination ordering.
func WithAppResponseOrder(order *AppResponseOrder) AppResponsePaginateOption {
	if order == nil {
		order = DefaultAppResponseOrder
	}
	o := *order
	return func(pager *appResponsePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultAppResponseOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithAppResponseFilter configures pagination filter.
func WithAppResponseFilter(filter func(*AppResponseQuery) (*AppResponseQuery, error)) AppResponsePaginateOption {
	return func(pager *appResponsePager) error {
		if filter == nil {
			return errors.New("AppResponseQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type appResponsePager struct {
	order  *AppResponseOrder
	filter func(*AppResponseQuery) (*AppResponseQuery, error)
}

func newAppResponsePager(opts []AppResponsePaginateOption) (*appResponsePager, error) {
	pager := &appResponsePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultAppResponseOrder
	}
	return pager, nil
}

func (p *appResponsePager) applyFilter(query *AppResponseQuery) (*AppResponseQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *appResponsePager) toCursor(ar *AppResponse) Cursor {
	return p.order.Field.toCursor(ar)
}

func (p *appResponsePager) applyCursors(query *AppResponseQuery, after, before *Cursor) *AppResponseQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultAppResponseOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *appResponsePager) applyOrder(query *AppResponseQuery, reverse bool) *AppResponseQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultAppResponseOrder.Field {
		query = query.Order(direction.orderFunc(DefaultAppResponseOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to AppResponse.
func (ar *AppResponseQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...AppResponsePaginateOption,
) (*AppResponseConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newAppResponsePager(opts)
	if err != nil {
		return nil, err
	}

	if ar, err = pager.applyFilter(ar); err != nil {
		return nil, err
	}

	conn := &AppResponseConnection{Edges: []*AppResponseEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := ar.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := ar.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	ar = pager.applyCursors(ar, after, before)
	ar = pager.applyOrder(ar, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		ar = ar.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		ar = ar.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := ar.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *AppResponse
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *AppResponse {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *AppResponse {
			return nodes[i]
		}
	}

	conn.Edges = make([]*AppResponseEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &AppResponseEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

var (
	// AppResponseOrderFieldCreatedAt orders AppResponse by created_at.
	AppResponseOrderFieldCreatedAt = &AppResponseOrderField{
		field: appresponse.FieldCreatedAt,
		toCursor: func(ar *AppResponse) Cursor {
			return Cursor{
				ID:    ar.ID,
				Value: ar.CreatedAt,
			}
		},
	}
	// AppResponseOrderFieldUpdatedAt orders AppResponse by updated_at.
	AppResponseOrderFieldUpdatedAt = &AppResponseOrderField{
		field: appresponse.FieldUpdatedAt,
		toCursor: func(ar *AppResponse) Cursor {
			return Cursor{
				ID:    ar.ID,
				Value: ar.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f AppResponseOrderField) String() string {
	var str string
	switch f.field {
	case appresponse.FieldCreatedAt:
		str = "CREATED_AT"
	case appresponse.FieldUpdatedAt:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f AppResponseOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *AppResponseOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("AppResponseOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *AppResponseOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *AppResponseOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid AppResponseOrderField", str)
	}
	return nil
}

// AppResponseOrderField defines the ordering field of AppResponse.
type AppResponseOrderField struct {
	field    string
	toCursor func(*AppResponse) Cursor
}

// AppResponseOrder defines the ordering of AppResponse.
type AppResponseOrder struct {
	Direction OrderDirection         `json:"direction"`
	Field     *AppResponseOrderField `json:"field"`
}

// DefaultAppResponseOrder is the default ordering of AppResponse.
var DefaultAppResponseOrder = &AppResponseOrder{
	Direction: OrderDirectionAsc,
	Field: &AppResponseOrderField{
		field: appresponse.FieldID,
		toCursor: func(ar *AppResponse) Cursor {
			return Cursor{ID: ar.ID}
		},
	},
}

// ToEdge converts AppResponse into AppResponseEdge.
func (ar *AppResponse) ToEdge(order *AppResponseOrder) *AppResponseEdge {
	if order == nil {
		order = DefaultAppResponseOrder
	}
	return &AppResponseEdge{
		Node:   ar,
		Cursor: order.Field.toCursor(ar),
	}
}

// IPEdge is the edge representation of IP.
type IPEdge struct {
	Node   *IP    `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// IPConnection is the connection containing edges to IP.
type IPConnection struct {
	Edges      []*IPEdge `json:"edges"`
	PageInfo   PageInfo  `json:"pageInfo"`
	TotalCount int       `json:"totalCount"`
}

// IPPaginateOption enables pagination customization.
type IPPaginateOption func(*iPPager) error

// WithIPOrder configures pagination ordering.
func WithIPOrder(order *IPOrder) IPPaginateOption {
	if order == nil {
		order = DefaultIPOrder
	}
	o := *order
	return func(pager *iPPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultIPOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithIPFilter configures pagination filter.
func WithIPFilter(filter func(*IPQuery) (*IPQuery, error)) IPPaginateOption {
	return func(pager *iPPager) error {
		if filter == nil {
			return errors.New("IPQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type iPPager struct {
	order  *IPOrder
	filter func(*IPQuery) (*IPQuery, error)
}

func newIPPager(opts []IPPaginateOption) (*iPPager, error) {
	pager := &iPPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultIPOrder
	}
	return pager, nil
}

func (p *iPPager) applyFilter(query *IPQuery) (*IPQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *iPPager) toCursor(i *IP) Cursor {
	return p.order.Field.toCursor(i)
}

func (p *iPPager) applyCursors(query *IPQuery, after, before *Cursor) *IPQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultIPOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *iPPager) applyOrder(query *IPQuery, reverse bool) *IPQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultIPOrder.Field {
		query = query.Order(direction.orderFunc(DefaultIPOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to IP.
func (i *IPQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...IPPaginateOption,
) (*IPConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newIPPager(opts)
	if err != nil {
		return nil, err
	}

	if i, err = pager.applyFilter(i); err != nil {
		return nil, err
	}

	conn := &IPConnection{Edges: []*IPEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := i.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := i.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	i = pager.applyCursors(i, after, before)
	i = pager.applyOrder(i, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		i = i.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		i = i.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := i.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *IP
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *IP {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *IP {
			return nodes[i]
		}
	}

	conn.Edges = make([]*IPEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &IPEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

var (
	// IPOrderFieldCreatedAt orders IP by created_at.
	IPOrderFieldCreatedAt = &IPOrderField{
		field: ip.FieldCreatedAt,
		toCursor: func(i *IP) Cursor {
			return Cursor{
				ID:    i.ID,
				Value: i.CreatedAt,
			}
		},
	}
	// IPOrderFieldUpdatedAt orders IP by updated_at.
	IPOrderFieldUpdatedAt = &IPOrderField{
		field: ip.FieldUpdatedAt,
		toCursor: func(i *IP) Cursor {
			return Cursor{
				ID:    i.ID,
				Value: i.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f IPOrderField) String() string {
	var str string
	switch f.field {
	case ip.FieldCreatedAt:
		str = "CREATED_AT"
	case ip.FieldUpdatedAt:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f IPOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *IPOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("IPOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *IPOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *IPOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid IPOrderField", str)
	}
	return nil
}

// IPOrderField defines the ordering field of IP.
type IPOrderField struct {
	field    string
	toCursor func(*IP) Cursor
}

// IPOrder defines the ordering of IP.
type IPOrder struct {
	Direction OrderDirection `json:"direction"`
	Field     *IPOrderField  `json:"field"`
}

// DefaultIPOrder is the default ordering of IP.
var DefaultIPOrder = &IPOrder{
	Direction: OrderDirectionAsc,
	Field: &IPOrderField{
		field: ip.FieldID,
		toCursor: func(i *IP) Cursor {
			return Cursor{ID: i.ID}
		},
	},
}

// ToEdge converts IP into IPEdge.
func (i *IP) ToEdge(order *IPOrder) *IPEdge {
	if order == nil {
		order = DefaultIPOrder
	}
	return &IPEdge{
		Node:   i,
		Cursor: order.Field.toCursor(i),
	}
}

// TaskEdge is the edge representation of Task.
type TaskEdge struct {
	Node   *Task  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// TaskConnection is the connection containing edges to Task.
type TaskConnection struct {
	Edges      []*TaskEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

// TaskPaginateOption enables pagination customization.
type TaskPaginateOption func(*taskPager) error

// WithTaskOrder configures pagination ordering.
func WithTaskOrder(order *TaskOrder) TaskPaginateOption {
	if order == nil {
		order = DefaultTaskOrder
	}
	o := *order
	return func(pager *taskPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTaskOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTaskFilter configures pagination filter.
func WithTaskFilter(filter func(*TaskQuery) (*TaskQuery, error)) TaskPaginateOption {
	return func(pager *taskPager) error {
		if filter == nil {
			return errors.New("TaskQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type taskPager struct {
	order  *TaskOrder
	filter func(*TaskQuery) (*TaskQuery, error)
}

func newTaskPager(opts []TaskPaginateOption) (*taskPager, error) {
	pager := &taskPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTaskOrder
	}
	return pager, nil
}

func (p *taskPager) applyFilter(query *TaskQuery) (*TaskQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *taskPager) toCursor(t *Task) Cursor {
	return p.order.Field.toCursor(t)
}

func (p *taskPager) applyCursors(query *TaskQuery, after, before *Cursor) *TaskQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultTaskOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *taskPager) applyOrder(query *TaskQuery, reverse bool) *TaskQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultTaskOrder.Field {
		query = query.Order(direction.orderFunc(DefaultTaskOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Task.
func (t *TaskQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TaskPaginateOption,
) (*TaskConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTaskPager(opts)
	if err != nil {
		return nil, err
	}

	if t, err = pager.applyFilter(t); err != nil {
		return nil, err
	}

	conn := &TaskConnection{Edges: []*TaskEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := t.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := t.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	t = pager.applyCursors(t, after, before)
	t = pager.applyOrder(t, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		t = t.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		t = t.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := t.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Task
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Task {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Task {
			return nodes[i]
		}
	}

	conn.Edges = make([]*TaskEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &TaskEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

var (
	// TaskOrderFieldCreatedAt orders Task by created_at.
	TaskOrderFieldCreatedAt = &TaskOrderField{
		field: task.FieldCreatedAt,
		toCursor: func(t *Task) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.CreatedAt,
			}
		},
	}
	// TaskOrderFieldUpdatedAt orders Task by updated_at.
	TaskOrderFieldUpdatedAt = &TaskOrderField{
		field: task.FieldUpdatedAt,
		toCursor: func(t *Task) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f TaskOrderField) String() string {
	var str string
	switch f.field {
	case task.FieldCreatedAt:
		str = "CREATED_AT"
	case task.FieldUpdatedAt:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f TaskOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *TaskOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("TaskOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *TaskOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *TaskOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid TaskOrderField", str)
	}
	return nil
}

// TaskOrderField defines the ordering field of Task.
type TaskOrderField struct {
	field    string
	toCursor func(*Task) Cursor
}

// TaskOrder defines the ordering of Task.
type TaskOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *TaskOrderField `json:"field"`
}

// DefaultTaskOrder is the default ordering of Task.
var DefaultTaskOrder = &TaskOrder{
	Direction: OrderDirectionAsc,
	Field: &TaskOrderField{
		field: task.FieldID,
		toCursor: func(t *Task) Cursor {
			return Cursor{ID: t.ID}
		},
	},
}

// ToEdge converts Task into TaskEdge.
func (t *Task) ToEdge(order *TaskOrder) *TaskEdge {
	if order == nil {
		order = DefaultTaskOrder
	}
	return &TaskEdge{
		Node:   t,
		Cursor: order.Field.toCursor(t),
	}
}

// UserEdge is the edge representation of User.
type UserEdge struct {
	Node   *User  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// UserConnection is the connection containing edges to User.
type UserConnection struct {
	Edges      []*UserEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

// UserPaginateOption enables pagination customization.
type UserPaginateOption func(*userPager) error

// WithUserOrder configures pagination ordering.
func WithUserOrder(order *UserOrder) UserPaginateOption {
	if order == nil {
		order = DefaultUserOrder
	}
	o := *order
	return func(pager *userPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserFilter configures pagination filter.
func WithUserFilter(filter func(*UserQuery) (*UserQuery, error)) UserPaginateOption {
	return func(pager *userPager) error {
		if filter == nil {
			return errors.New("UserQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userPager struct {
	order  *UserOrder
	filter func(*UserQuery) (*UserQuery, error)
}

func newUserPager(opts []UserPaginateOption) (*userPager, error) {
	pager := &userPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserOrder
	}
	return pager, nil
}

func (p *userPager) applyFilter(query *UserQuery) (*UserQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userPager) toCursor(u *User) Cursor {
	return p.order.Field.toCursor(u)
}

func (p *userPager) applyCursors(query *UserQuery, after, before *Cursor) *UserQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultUserOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *userPager) applyOrder(query *UserQuery, reverse bool) *UserQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultUserOrder.Field {
		query = query.Order(direction.orderFunc(DefaultUserOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to User.
func (u *UserQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserPaginateOption,
) (*UserConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserPager(opts)
	if err != nil {
		return nil, err
	}

	if u, err = pager.applyFilter(u); err != nil {
		return nil, err
	}

	conn := &UserConnection{Edges: []*UserEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := u.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := u.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	u = pager.applyCursors(u, after, before)
	u = pager.applyOrder(u, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		u = u.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		u = u.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := u.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *User
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *User {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *User {
			return nodes[i]
		}
	}

	conn.Edges = make([]*UserEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &UserEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

var (
	// UserOrderFieldCreatedAt orders User by created_at.
	UserOrderFieldCreatedAt = &UserOrderField{
		field: user.FieldCreatedAt,
		toCursor: func(u *User) Cursor {
			return Cursor{
				ID:    u.ID,
				Value: u.CreatedAt,
			}
		},
	}
	// UserOrderFieldUpdatedAt orders User by updated_at.
	UserOrderFieldUpdatedAt = &UserOrderField{
		field: user.FieldUpdatedAt,
		toCursor: func(u *User) Cursor {
			return Cursor{
				ID:    u.ID,
				Value: u.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f UserOrderField) String() string {
	var str string
	switch f.field {
	case user.FieldCreatedAt:
		str = "CREATED_AT"
	case user.FieldUpdatedAt:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f UserOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *UserOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("UserOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *UserOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *UserOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid UserOrderField", str)
	}
	return nil
}

// UserOrderField defines the ordering field of User.
type UserOrderField struct {
	field    string
	toCursor func(*User) Cursor
}

// UserOrder defines the ordering of User.
type UserOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *UserOrderField `json:"field"`
}

// DefaultUserOrder is the default ordering of User.
var DefaultUserOrder = &UserOrder{
	Direction: OrderDirectionAsc,
	Field: &UserOrderField{
		field: user.FieldID,
		toCursor: func(u *User) Cursor {
			return Cursor{ID: u.ID}
		},
	},
}

// ToEdge converts User into UserEdge.
func (u *User) ToEdge(order *UserOrder) *UserEdge {
	if order == nil {
		order = DefaultUserOrder
	}
	return &UserEdge{
		Node:   u,
		Cursor: order.Field.toCursor(u),
	}
}
