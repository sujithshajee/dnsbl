// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/google/uuid"
)

// Relay Node interface support
type Node interface {
	IsNode()
}

// AppQuery represents a query run to a dnsbl service
type AppQuery struct {
	// Unique ID for the AppQuery
	ID uuid.UUID `json:"id"`
	// The datetime this IP was created
	CreatedAt time.Time `json:"created_at"`
	// The datetime this AppQuery was last updated
	UpdatedAt time.Time `json:"updated_at"`
	// The IP address the query was performed on
	IP *IP `json:"ip"`
	// The responses that were received for this dnsbl query
	Responses *AppResponseConnection `json:"responses"`
}

func (AppQuery) IsNode() {}

// AppQueryConnection is the paginated cursor connection for an IP's AppQueries
type AppQueryConnection struct {
	TotalCount int             `json:"totalCount"`
	PageInfo   *PageInfo       `json:"pageInfo"`
	Edges      []*AppQueryEdge `json:"edges"`
}

// AppQueryEdge is the connection edge for IP AppQueries
type AppQueryEdge struct {
	Node   *AppQuery `json:"node"`
	Cursor string    `json:"cursor"`
}

// AppQueryOrder is the ordering input for a AppQuery
type AppQueryOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *AppQueryOrderField `json:"field"`
}

// AppResponse represents the response to a query to a dnsbl service for an IP
type AppResponse struct {
	// Unique ID for the AppResponse
	ID uuid.UUID `json:"id"`
	// The datetime this AppResponse was created
	CreatedAt time.Time `json:"created_at"`
	// The datetime this AppResponse was last updated
	UpdatedAt time.Time `json:"updated_at"`
	// The query this response represents a result for
	Query *AppQuery `json:"query"`
	// The response code represented by this response
	Code string `json:"code"`
	// Description a human readable representation of the error code
	Description string `json:"description"`
}

func (AppResponse) IsNode() {}

// AppResponseConnection is the connection edge for AppQuery
type AppResponseConnection struct {
	TotalCount int                `json:"totalCount"`
	PageInfo   *PageInfo          `json:"pageInfo"`
	Edges      []*AppResponseEdge `json:"edges"`
}

// AppResponseEdge is the connection edge for AppResponse on a AppQuery
type AppResponseEdge struct {
	Node   *AppResponse `json:"node"`
	Cursor string       `json:"cursor"`
}

// IP represents an IPv4 IP address
type IP struct {
	// Unique identifier for IP address
	ID uuid.UUID `json:"id"`
	// The datetime this IP was first checked
	CreatedAt time.Time `json:"created_at"`
	// The datetime this IP was last checked
	UpdatedAt time.Time `json:"updated_at"`
	// response_code represents the last response code from the latest App query
	ResponseCode string `json:"response_code"`
	// The (IPv4) IP address
	IPAddress string `json:"ip_address"`
	// The queries, ordered by most recently finished
	Queries *AppQueryConnection `json:"queries"`
}

func (IP) IsNode() {}

// PageInfo represents pagination information for forwards and backwards pagination
type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *string `json:"startCursor"`
	EndCursor       *string `json:"endCursor"`
}

// An task can be used to check the progress of a background task
type Task struct {
	// Unique ID of the enqueued task
	ID uuid.UUID `json:"id"`
	// Type of the enqueued task. Only IPDNSBL is supported
	Type TaskType `json:"type"`
	// IP Address to be checked
	IPAddress string `json:"ip_address"`
	// Status of the Task
	Status TaskStatus `json:"status"`
	// Error description if the Status is ERROR
	Error *string `json:"error"`
}

func (Task) IsNode() {}

// AppQueryOrderField is the field to order by
type AppQueryOrderField string

const (
	AppQueryOrderFieldUpdatedAt AppQueryOrderField = "UPDATED_AT"
	AppQueryOrderFieldCreatedAt AppQueryOrderField = "CREATED_AT"
)

var AllAppQueryOrderField = []AppQueryOrderField{
	AppQueryOrderFieldUpdatedAt,
	AppQueryOrderFieldCreatedAt,
}

func (e AppQueryOrderField) IsValid() bool {
	switch e {
	case AppQueryOrderFieldUpdatedAt, AppQueryOrderFieldCreatedAt:
		return true
	}
	return false
}

func (e AppQueryOrderField) String() string {
	return string(e)
}

func (e *AppQueryOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppQueryOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppQueryOrderField", str)
	}
	return nil
}

func (e AppQueryOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// OrderDirection represents the directional ordering of a pagination cursor
type OrderDirection string

const (
	OrderDirectionAsc  OrderDirection = "ASC"
	OrderDirectionDesc OrderDirection = "DESC"
)

var AllOrderDirection = []OrderDirection{
	OrderDirectionAsc,
	OrderDirectionDesc,
}

func (e OrderDirection) IsValid() bool {
	switch e {
	case OrderDirectionAsc, OrderDirectionDesc:
		return true
	}
	return false
}

func (e OrderDirection) String() string {
	return string(e)
}

func (e *OrderDirection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderDirection", str)
	}
	return nil
}

func (e OrderDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Status of the task
type TaskStatus string

const (
	TaskStatusWaiting    TaskStatus = "WAITING"
	TaskStatusInProgress TaskStatus = "IN_PROGRESS"
	TaskStatusDone       TaskStatus = "DONE"
	TaskStatusError      TaskStatus = "ERROR"
)

var AllTaskStatus = []TaskStatus{
	TaskStatusWaiting,
	TaskStatusInProgress,
	TaskStatusDone,
	TaskStatusError,
}

func (e TaskStatus) IsValid() bool {
	switch e {
	case TaskStatusWaiting, TaskStatusInProgress, TaskStatusDone, TaskStatusError:
		return true
	}
	return false
}

func (e TaskStatus) String() string {
	return string(e)
}

func (e *TaskStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TaskStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TaskStatus", str)
	}
	return nil
}

func (e TaskStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Type of task being preformed
type TaskType string

const (
	TaskTypeIPDNSBl TaskType = "IPDNSBL"
)

var AllTaskType = []TaskType{
	TaskTypeIPDNSBl,
}

func (e TaskType) IsValid() bool {
	switch e {
	case TaskTypeIPDNSBl:
		return true
	}
	return false
}

func (e TaskType) String() string {
	return string(e)
}

func (e *TaskType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TaskType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TaskType", str)
	}
	return nil
}

func (e TaskType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
