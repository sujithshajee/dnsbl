// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/sujithshajee/dnsbl/app/ent/appquery"
	"github.com/sujithshajee/dnsbl/app/ent/appresponse"
)

// AppResponseCreate is the builder for creating a AppResponse entity.
type AppResponseCreate struct {
	config
	mutation *AppResponseMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (arc *AppResponseCreate) SetCreatedAt(t time.Time) *AppResponseCreate {
	arc.mutation.SetCreatedAt(t)
	return arc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (arc *AppResponseCreate) SetNillableCreatedAt(t *time.Time) *AppResponseCreate {
	if t != nil {
		arc.SetCreatedAt(*t)
	}
	return arc
}

// SetUpdatedAt sets the "updated_at" field.
func (arc *AppResponseCreate) SetUpdatedAt(t time.Time) *AppResponseCreate {
	arc.mutation.SetUpdatedAt(t)
	return arc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (arc *AppResponseCreate) SetNillableUpdatedAt(t *time.Time) *AppResponseCreate {
	if t != nil {
		arc.SetUpdatedAt(*t)
	}
	return arc
}

// SetResponsecode sets the "responsecode" field.
func (arc *AppResponseCreate) SetResponsecode(s string) *AppResponseCreate {
	arc.mutation.SetResponsecode(s)
	return arc
}

// SetCodedescription sets the "codedescription" field.
func (arc *AppResponseCreate) SetCodedescription(s string) *AppResponseCreate {
	arc.mutation.SetCodedescription(s)
	return arc
}

// SetID sets the "id" field.
func (arc *AppResponseCreate) SetID(u uuid.UUID) *AppResponseCreate {
	arc.mutation.SetID(u)
	return arc
}

// SetQueryID sets the "query" edge to the AppQuery entity by ID.
func (arc *AppResponseCreate) SetQueryID(id uuid.UUID) *AppResponseCreate {
	arc.mutation.SetQueryID(id)
	return arc
}

// SetQuery sets the "query" edge to the AppQuery entity.
func (arc *AppResponseCreate) SetQuery(a *AppQuery) *AppResponseCreate {
	return arc.SetQueryID(a.ID)
}

// Mutation returns the AppResponseMutation object of the builder.
func (arc *AppResponseCreate) Mutation() *AppResponseMutation {
	return arc.mutation
}

// Save creates the AppResponse in the database.
func (arc *AppResponseCreate) Save(ctx context.Context) (*AppResponse, error) {
	var (
		err  error
		node *AppResponse
	)
	arc.defaults()
	if len(arc.hooks) == 0 {
		if err = arc.check(); err != nil {
			return nil, err
		}
		node, err = arc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppResponseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = arc.check(); err != nil {
				return nil, err
			}
			arc.mutation = mutation
			if node, err = arc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(arc.hooks) - 1; i >= 0; i-- {
			if arc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = arc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, arc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (arc *AppResponseCreate) SaveX(ctx context.Context) *AppResponse {
	v, err := arc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (arc *AppResponseCreate) Exec(ctx context.Context) error {
	_, err := arc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arc *AppResponseCreate) ExecX(ctx context.Context) {
	if err := arc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (arc *AppResponseCreate) defaults() {
	if _, ok := arc.mutation.CreatedAt(); !ok {
		v := appresponse.DefaultCreatedAt()
		arc.mutation.SetCreatedAt(v)
	}
	if _, ok := arc.mutation.UpdatedAt(); !ok {
		v := appresponse.DefaultUpdatedAt()
		arc.mutation.SetUpdatedAt(v)
	}
	if _, ok := arc.mutation.ID(); !ok {
		v := appresponse.DefaultID()
		arc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (arc *AppResponseCreate) check() error {
	if _, ok := arc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := arc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := arc.mutation.Responsecode(); !ok {
		return &ValidationError{Name: "responsecode", err: errors.New(`ent: missing required field "responsecode"`)}
	}
	if _, ok := arc.mutation.Codedescription(); !ok {
		return &ValidationError{Name: "codedescription", err: errors.New(`ent: missing required field "codedescription"`)}
	}
	if _, ok := arc.mutation.QueryID(); !ok {
		return &ValidationError{Name: "query", err: errors.New("ent: missing required edge \"query\"")}
	}
	return nil
}

func (arc *AppResponseCreate) sqlSave(ctx context.Context) (*AppResponse, error) {
	_node, _spec := arc.createSpec()
	if err := sqlgraph.CreateNode(ctx, arc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		_node.ID = _spec.ID.Value.(uuid.UUID)
	}
	return _node, nil
}

func (arc *AppResponseCreate) createSpec() (*AppResponse, *sqlgraph.CreateSpec) {
	var (
		_node = &AppResponse{config: arc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: appresponse.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appresponse.FieldID,
			},
		}
	)
	if id, ok := arc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := arc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appresponse.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := arc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appresponse.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := arc.mutation.Responsecode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appresponse.FieldResponsecode,
		})
		_node.Responsecode = value
	}
	if value, ok := arc.mutation.Codedescription(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appresponse.FieldCodedescription,
		})
		_node.Codedescription = value
	}
	if nodes := arc.mutation.QueryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appresponse.QueryTable,
			Columns: []string{appresponse.QueryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: appquery.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.app_query_responses = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AppResponseCreateBulk is the builder for creating many AppResponse entities in bulk.
type AppResponseCreateBulk struct {
	config
	builders []*AppResponseCreate
}

// Save creates the AppResponse entities in the database.
func (arcb *AppResponseCreateBulk) Save(ctx context.Context) ([]*AppResponse, error) {
	specs := make([]*sqlgraph.CreateSpec, len(arcb.builders))
	nodes := make([]*AppResponse, len(arcb.builders))
	mutators := make([]Mutator, len(arcb.builders))
	for i := range arcb.builders {
		func(i int, root context.Context) {
			builder := arcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppResponseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, arcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, arcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, arcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (arcb *AppResponseCreateBulk) SaveX(ctx context.Context) []*AppResponse {
	v, err := arcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (arcb *AppResponseCreateBulk) Exec(ctx context.Context) error {
	_, err := arcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arcb *AppResponseCreateBulk) ExecX(ctx context.Context) {
	if err := arcb.Exec(ctx); err != nil {
		panic(err)
	}
}
