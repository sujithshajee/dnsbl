// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/sujithshajee/dnsbl/app/ent/appquery"
	"github.com/sujithshajee/dnsbl/app/ent/appresponse"
	"github.com/sujithshajee/dnsbl/app/ent/predicate"
)

// AppResponseUpdate is the builder for updating AppResponse entities.
type AppResponseUpdate struct {
	config
	hooks    []Hook
	mutation *AppResponseMutation
}

// Where appends a list predicates to the AppResponseUpdate builder.
func (aru *AppResponseUpdate) Where(ps ...predicate.AppResponse) *AppResponseUpdate {
	aru.mutation.Where(ps...)
	return aru
}

// SetCreatedAt sets the "created_at" field.
func (aru *AppResponseUpdate) SetCreatedAt(t time.Time) *AppResponseUpdate {
	aru.mutation.SetCreatedAt(t)
	return aru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aru *AppResponseUpdate) SetNillableCreatedAt(t *time.Time) *AppResponseUpdate {
	if t != nil {
		aru.SetCreatedAt(*t)
	}
	return aru
}

// SetUpdatedAt sets the "updated_at" field.
func (aru *AppResponseUpdate) SetUpdatedAt(t time.Time) *AppResponseUpdate {
	aru.mutation.SetUpdatedAt(t)
	return aru
}

// SetResponsecode sets the "responsecode" field.
func (aru *AppResponseUpdate) SetResponsecode(s string) *AppResponseUpdate {
	aru.mutation.SetResponsecode(s)
	return aru
}

// SetCodedescription sets the "codedescription" field.
func (aru *AppResponseUpdate) SetCodedescription(s string) *AppResponseUpdate {
	aru.mutation.SetCodedescription(s)
	return aru
}

// SetQueryID sets the "query" edge to the AppQuery entity by ID.
func (aru *AppResponseUpdate) SetQueryID(id uuid.UUID) *AppResponseUpdate {
	aru.mutation.SetQueryID(id)
	return aru
}

// SetQuery sets the "query" edge to the AppQuery entity.
func (aru *AppResponseUpdate) SetQuery(a *AppQuery) *AppResponseUpdate {
	return aru.SetQueryID(a.ID)
}

// Mutation returns the AppResponseMutation object of the builder.
func (aru *AppResponseUpdate) Mutation() *AppResponseMutation {
	return aru.mutation
}

// ClearQuery clears the "query" edge to the AppQuery entity.
func (aru *AppResponseUpdate) ClearQuery() *AppResponseUpdate {
	aru.mutation.ClearQuery()
	return aru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aru *AppResponseUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	aru.defaults()
	if len(aru.hooks) == 0 {
		if err = aru.check(); err != nil {
			return 0, err
		}
		affected, err = aru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppResponseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = aru.check(); err != nil {
				return 0, err
			}
			aru.mutation = mutation
			affected, err = aru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(aru.hooks) - 1; i >= 0; i-- {
			if aru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (aru *AppResponseUpdate) SaveX(ctx context.Context) int {
	affected, err := aru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aru *AppResponseUpdate) Exec(ctx context.Context) error {
	_, err := aru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aru *AppResponseUpdate) ExecX(ctx context.Context) {
	if err := aru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aru *AppResponseUpdate) defaults() {
	if _, ok := aru.mutation.UpdatedAt(); !ok {
		v := appresponse.UpdateDefaultUpdatedAt()
		aru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aru *AppResponseUpdate) check() error {
	if _, ok := aru.mutation.QueryID(); aru.mutation.QueryCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"query\"")
	}
	return nil
}

func (aru *AppResponseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appresponse.Table,
			Columns: appresponse.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appresponse.FieldID,
			},
		},
	}
	if ps := aru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aru.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appresponse.FieldCreatedAt,
		})
	}
	if value, ok := aru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appresponse.FieldUpdatedAt,
		})
	}
	if value, ok := aru.mutation.Responsecode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appresponse.FieldResponsecode,
		})
	}
	if value, ok := aru.mutation.Codedescription(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appresponse.FieldCodedescription,
		})
	}
	if aru.mutation.QueryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appresponse.QueryTable,
			Columns: []string{appresponse.QueryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: appquery.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aru.mutation.QueryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appresponse.QueryTable,
			Columns: []string{appresponse.QueryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: appquery.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appresponse.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AppResponseUpdateOne is the builder for updating a single AppResponse entity.
type AppResponseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppResponseMutation
}

// SetCreatedAt sets the "created_at" field.
func (aruo *AppResponseUpdateOne) SetCreatedAt(t time.Time) *AppResponseUpdateOne {
	aruo.mutation.SetCreatedAt(t)
	return aruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aruo *AppResponseUpdateOne) SetNillableCreatedAt(t *time.Time) *AppResponseUpdateOne {
	if t != nil {
		aruo.SetCreatedAt(*t)
	}
	return aruo
}

// SetUpdatedAt sets the "updated_at" field.
func (aruo *AppResponseUpdateOne) SetUpdatedAt(t time.Time) *AppResponseUpdateOne {
	aruo.mutation.SetUpdatedAt(t)
	return aruo
}

// SetResponsecode sets the "responsecode" field.
func (aruo *AppResponseUpdateOne) SetResponsecode(s string) *AppResponseUpdateOne {
	aruo.mutation.SetResponsecode(s)
	return aruo
}

// SetCodedescription sets the "codedescription" field.
func (aruo *AppResponseUpdateOne) SetCodedescription(s string) *AppResponseUpdateOne {
	aruo.mutation.SetCodedescription(s)
	return aruo
}

// SetQueryID sets the "query" edge to the AppQuery entity by ID.
func (aruo *AppResponseUpdateOne) SetQueryID(id uuid.UUID) *AppResponseUpdateOne {
	aruo.mutation.SetQueryID(id)
	return aruo
}

// SetQuery sets the "query" edge to the AppQuery entity.
func (aruo *AppResponseUpdateOne) SetQuery(a *AppQuery) *AppResponseUpdateOne {
	return aruo.SetQueryID(a.ID)
}

// Mutation returns the AppResponseMutation object of the builder.
func (aruo *AppResponseUpdateOne) Mutation() *AppResponseMutation {
	return aruo.mutation
}

// ClearQuery clears the "query" edge to the AppQuery entity.
func (aruo *AppResponseUpdateOne) ClearQuery() *AppResponseUpdateOne {
	aruo.mutation.ClearQuery()
	return aruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aruo *AppResponseUpdateOne) Select(field string, fields ...string) *AppResponseUpdateOne {
	aruo.fields = append([]string{field}, fields...)
	return aruo
}

// Save executes the query and returns the updated AppResponse entity.
func (aruo *AppResponseUpdateOne) Save(ctx context.Context) (*AppResponse, error) {
	var (
		err  error
		node *AppResponse
	)
	aruo.defaults()
	if len(aruo.hooks) == 0 {
		if err = aruo.check(); err != nil {
			return nil, err
		}
		node, err = aruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppResponseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = aruo.check(); err != nil {
				return nil, err
			}
			aruo.mutation = mutation
			node, err = aruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aruo.hooks) - 1; i >= 0; i-- {
			if aruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (aruo *AppResponseUpdateOne) SaveX(ctx context.Context) *AppResponse {
	node, err := aruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aruo *AppResponseUpdateOne) Exec(ctx context.Context) error {
	_, err := aruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aruo *AppResponseUpdateOne) ExecX(ctx context.Context) {
	if err := aruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aruo *AppResponseUpdateOne) defaults() {
	if _, ok := aruo.mutation.UpdatedAt(); !ok {
		v := appresponse.UpdateDefaultUpdatedAt()
		aruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aruo *AppResponseUpdateOne) check() error {
	if _, ok := aruo.mutation.QueryID(); aruo.mutation.QueryCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"query\"")
	}
	return nil
}

func (aruo *AppResponseUpdateOne) sqlSave(ctx context.Context) (_node *AppResponse, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appresponse.Table,
			Columns: appresponse.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appresponse.FieldID,
			},
		},
	}
	id, ok := aruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing AppResponse.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := aruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appresponse.FieldID)
		for _, f := range fields {
			if !appresponse.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != appresponse.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aruo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appresponse.FieldCreatedAt,
		})
	}
	if value, ok := aruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appresponse.FieldUpdatedAt,
		})
	}
	if value, ok := aruo.mutation.Responsecode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appresponse.FieldResponsecode,
		})
	}
	if value, ok := aruo.mutation.Codedescription(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appresponse.FieldCodedescription,
		})
	}
	if aruo.mutation.QueryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appresponse.QueryTable,
			Columns: []string{appresponse.QueryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: appquery.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aruo.mutation.QueryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appresponse.QueryTable,
			Columns: []string{appresponse.QueryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: appquery.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AppResponse{config: aruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appresponse.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
