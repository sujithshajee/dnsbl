// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/google/uuid"
	"github.com/sujithshajee/dnsbl/app/ent/migrate"

	"github.com/sujithshajee/dnsbl/app/ent/appquery"
	"github.com/sujithshajee/dnsbl/app/ent/appresponse"
	"github.com/sujithshajee/dnsbl/app/ent/ip"
	"github.com/sujithshajee/dnsbl/app/ent/task"
	"github.com/sujithshajee/dnsbl/app/ent/user"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AppQuery is the client for interacting with the AppQuery builders.
	AppQuery *AppQueryClient
	// AppResponse is the client for interacting with the AppResponse builders.
	AppResponse *AppResponseClient
	// IP is the client for interacting with the IP builders.
	IP *IPClient
	// Task is the client for interacting with the Task builders.
	Task *TaskClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AppQuery = NewAppQueryClient(c.config)
	c.AppResponse = NewAppResponseClient(c.config)
	c.IP = NewIPClient(c.config)
	c.Task = NewTaskClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		AppQuery:    NewAppQueryClient(cfg),
		AppResponse: NewAppResponseClient(cfg),
		IP:          NewIPClient(cfg),
		Task:        NewTaskClient(cfg),
		User:        NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:      cfg,
		AppQuery:    NewAppQueryClient(cfg),
		AppResponse: NewAppResponseClient(cfg),
		IP:          NewIPClient(cfg),
		Task:        NewTaskClient(cfg),
		User:        NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AppQuery.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.AppQuery.Use(hooks...)
	c.AppResponse.Use(hooks...)
	c.IP.Use(hooks...)
	c.Task.Use(hooks...)
	c.User.Use(hooks...)
}

// AppQueryClient is a client for the AppQuery schema.
type AppQueryClient struct {
	config
}

// NewAppQueryClient returns a client for the AppQuery from the given config.
func NewAppQueryClient(c config) *AppQueryClient {
	return &AppQueryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appquery.Hooks(f(g(h())))`.
func (c *AppQueryClient) Use(hooks ...Hook) {
	c.hooks.AppQuery = append(c.hooks.AppQuery, hooks...)
}

// Create returns a create builder for AppQuery.
func (c *AppQueryClient) Create() *AppQueryCreate {
	mutation := newAppQueryMutation(c.config, OpCreate)
	return &AppQueryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppQuery entities.
func (c *AppQueryClient) CreateBulk(builders ...*AppQueryCreate) *AppQueryCreateBulk {
	return &AppQueryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppQuery.
func (c *AppQueryClient) Update() *AppQueryUpdate {
	mutation := newAppQueryMutation(c.config, OpUpdate)
	return &AppQueryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppQueryClient) UpdateOne(aq *AppQuery) *AppQueryUpdateOne {
	mutation := newAppQueryMutation(c.config, OpUpdateOne, withAppQuery(aq))
	return &AppQueryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppQueryClient) UpdateOneID(id uuid.UUID) *AppQueryUpdateOne {
	mutation := newAppQueryMutation(c.config, OpUpdateOne, withAppQueryID(id))
	return &AppQueryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppQuery.
func (c *AppQueryClient) Delete() *AppQueryDelete {
	mutation := newAppQueryMutation(c.config, OpDelete)
	return &AppQueryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AppQueryClient) DeleteOne(aq *AppQuery) *AppQueryDeleteOne {
	return c.DeleteOneID(aq.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AppQueryClient) DeleteOneID(id uuid.UUID) *AppQueryDeleteOne {
	builder := c.Delete().Where(appquery.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppQueryDeleteOne{builder}
}

// Query returns a query builder for AppQuery.
func (c *AppQueryClient) Query() *AppQueryQuery {
	return &AppQueryQuery{
		config: c.config,
	}
}

// Get returns a AppQuery entity by its id.
func (c *AppQueryClient) Get(ctx context.Context, id uuid.UUID) (*AppQuery, error) {
	return c.Query().Where(appquery.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppQueryClient) GetX(ctx context.Context, id uuid.UUID) *AppQuery {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryResponses queries the responses edge of a AppQuery.
func (c *AppQueryClient) QueryResponses(aq *AppQuery) *AppResponseQuery {
	query := &AppResponseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := aq.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(appquery.Table, appquery.FieldID, id),
			sqlgraph.To(appresponse.Table, appresponse.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, appquery.ResponsesTable, appquery.ResponsesColumn),
		)
		fromV = sqlgraph.Neighbors(aq.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryIpaddress queries the ipaddress edge of a AppQuery.
func (c *AppQueryClient) QueryIpaddress(aq *AppQuery) *IPQuery {
	query := &IPQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := aq.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(appquery.Table, appquery.FieldID, id),
			sqlgraph.To(ip.Table, ip.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, appquery.IpaddressTable, appquery.IpaddressColumn),
		)
		fromV = sqlgraph.Neighbors(aq.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AppQueryClient) Hooks() []Hook {
	return c.hooks.AppQuery
}

// AppResponseClient is a client for the AppResponse schema.
type AppResponseClient struct {
	config
}

// NewAppResponseClient returns a client for the AppResponse from the given config.
func NewAppResponseClient(c config) *AppResponseClient {
	return &AppResponseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appresponse.Hooks(f(g(h())))`.
func (c *AppResponseClient) Use(hooks ...Hook) {
	c.hooks.AppResponse = append(c.hooks.AppResponse, hooks...)
}

// Create returns a create builder for AppResponse.
func (c *AppResponseClient) Create() *AppResponseCreate {
	mutation := newAppResponseMutation(c.config, OpCreate)
	return &AppResponseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppResponse entities.
func (c *AppResponseClient) CreateBulk(builders ...*AppResponseCreate) *AppResponseCreateBulk {
	return &AppResponseCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppResponse.
func (c *AppResponseClient) Update() *AppResponseUpdate {
	mutation := newAppResponseMutation(c.config, OpUpdate)
	return &AppResponseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppResponseClient) UpdateOne(ar *AppResponse) *AppResponseUpdateOne {
	mutation := newAppResponseMutation(c.config, OpUpdateOne, withAppResponse(ar))
	return &AppResponseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppResponseClient) UpdateOneID(id uuid.UUID) *AppResponseUpdateOne {
	mutation := newAppResponseMutation(c.config, OpUpdateOne, withAppResponseID(id))
	return &AppResponseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppResponse.
func (c *AppResponseClient) Delete() *AppResponseDelete {
	mutation := newAppResponseMutation(c.config, OpDelete)
	return &AppResponseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AppResponseClient) DeleteOne(ar *AppResponse) *AppResponseDeleteOne {
	return c.DeleteOneID(ar.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AppResponseClient) DeleteOneID(id uuid.UUID) *AppResponseDeleteOne {
	builder := c.Delete().Where(appresponse.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppResponseDeleteOne{builder}
}

// Query returns a query builder for AppResponse.
func (c *AppResponseClient) Query() *AppResponseQuery {
	return &AppResponseQuery{
		config: c.config,
	}
}

// Get returns a AppResponse entity by its id.
func (c *AppResponseClient) Get(ctx context.Context, id uuid.UUID) (*AppResponse, error) {
	return c.Query().Where(appresponse.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppResponseClient) GetX(ctx context.Context, id uuid.UUID) *AppResponse {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryQuery queries the query edge of a AppResponse.
func (c *AppResponseClient) QueryQuery(ar *AppResponse) *AppQueryQuery {
	query := &AppQueryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ar.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(appresponse.Table, appresponse.FieldID, id),
			sqlgraph.To(appquery.Table, appquery.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, appresponse.QueryTable, appresponse.QueryColumn),
		)
		fromV = sqlgraph.Neighbors(ar.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AppResponseClient) Hooks() []Hook {
	return c.hooks.AppResponse
}

// IPClient is a client for the IP schema.
type IPClient struct {
	config
}

// NewIPClient returns a client for the IP from the given config.
func NewIPClient(c config) *IPClient {
	return &IPClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ip.Hooks(f(g(h())))`.
func (c *IPClient) Use(hooks ...Hook) {
	c.hooks.IP = append(c.hooks.IP, hooks...)
}

// Create returns a create builder for IP.
func (c *IPClient) Create() *IPCreate {
	mutation := newIPMutation(c.config, OpCreate)
	return &IPCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of IP entities.
func (c *IPClient) CreateBulk(builders ...*IPCreate) *IPCreateBulk {
	return &IPCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for IP.
func (c *IPClient) Update() *IPUpdate {
	mutation := newIPMutation(c.config, OpUpdate)
	return &IPUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *IPClient) UpdateOne(i *IP) *IPUpdateOne {
	mutation := newIPMutation(c.config, OpUpdateOne, withIP(i))
	return &IPUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *IPClient) UpdateOneID(id uuid.UUID) *IPUpdateOne {
	mutation := newIPMutation(c.config, OpUpdateOne, withIPID(id))
	return &IPUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for IP.
func (c *IPClient) Delete() *IPDelete {
	mutation := newIPMutation(c.config, OpDelete)
	return &IPDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *IPClient) DeleteOne(i *IP) *IPDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *IPClient) DeleteOneID(id uuid.UUID) *IPDeleteOne {
	builder := c.Delete().Where(ip.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &IPDeleteOne{builder}
}

// Query returns a query builder for IP.
func (c *IPClient) Query() *IPQuery {
	return &IPQuery{
		config: c.config,
	}
}

// Get returns a IP entity by its id.
func (c *IPClient) Get(ctx context.Context, id uuid.UUID) (*IP, error) {
	return c.Query().Where(ip.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *IPClient) GetX(ctx context.Context, id uuid.UUID) *IP {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryQueries queries the queries edge of a IP.
func (c *IPClient) QueryQueries(i *IP) *AppQueryQuery {
	query := &AppQueryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ip.Table, ip.FieldID, id),
			sqlgraph.To(appquery.Table, appquery.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ip.QueriesTable, ip.QueriesColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *IPClient) Hooks() []Hook {
	return c.hooks.IP
}

// TaskClient is a client for the Task schema.
type TaskClient struct {
	config
}

// NewTaskClient returns a client for the Task from the given config.
func NewTaskClient(c config) *TaskClient {
	return &TaskClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `task.Hooks(f(g(h())))`.
func (c *TaskClient) Use(hooks ...Hook) {
	c.hooks.Task = append(c.hooks.Task, hooks...)
}

// Create returns a create builder for Task.
func (c *TaskClient) Create() *TaskCreate {
	mutation := newTaskMutation(c.config, OpCreate)
	return &TaskCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Task entities.
func (c *TaskClient) CreateBulk(builders ...*TaskCreate) *TaskCreateBulk {
	return &TaskCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Task.
func (c *TaskClient) Update() *TaskUpdate {
	mutation := newTaskMutation(c.config, OpUpdate)
	return &TaskUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TaskClient) UpdateOne(t *Task) *TaskUpdateOne {
	mutation := newTaskMutation(c.config, OpUpdateOne, withTask(t))
	return &TaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TaskClient) UpdateOneID(id uuid.UUID) *TaskUpdateOne {
	mutation := newTaskMutation(c.config, OpUpdateOne, withTaskID(id))
	return &TaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Task.
func (c *TaskClient) Delete() *TaskDelete {
	mutation := newTaskMutation(c.config, OpDelete)
	return &TaskDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TaskClient) DeleteOne(t *Task) *TaskDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TaskClient) DeleteOneID(id uuid.UUID) *TaskDeleteOne {
	builder := c.Delete().Where(task.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TaskDeleteOne{builder}
}

// Query returns a query builder for Task.
func (c *TaskClient) Query() *TaskQuery {
	return &TaskQuery{
		config: c.config,
	}
}

// Get returns a Task entity by its id.
func (c *TaskClient) Get(ctx context.Context, id uuid.UUID) (*Task, error) {
	return c.Query().Where(task.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TaskClient) GetX(ctx context.Context, id uuid.UUID) *Task {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TaskClient) Hooks() []Hook {
	return c.hooks.Task
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
