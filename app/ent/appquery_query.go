// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/sujithshajee/dnsbl/app/ent/appquery"
	"github.com/sujithshajee/dnsbl/app/ent/appresponse"
	"github.com/sujithshajee/dnsbl/app/ent/ip"
	"github.com/sujithshajee/dnsbl/app/ent/predicate"
)

// AppQueryQuery is the builder for querying AppQuery entities.
type AppQueryQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.AppQuery
	// eager-loading edges.
	withResponses *AppResponseQuery
	withIpaddress *IPQuery
	withFKs       bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AppQueryQuery builder.
func (aqq *AppQueryQuery) Where(ps ...predicate.AppQuery) *AppQueryQuery {
	aqq.predicates = append(aqq.predicates, ps...)
	return aqq
}

// Limit adds a limit step to the query.
func (aqq *AppQueryQuery) Limit(limit int) *AppQueryQuery {
	aqq.limit = &limit
	return aqq
}

// Offset adds an offset step to the query.
func (aqq *AppQueryQuery) Offset(offset int) *AppQueryQuery {
	aqq.offset = &offset
	return aqq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (aqq *AppQueryQuery) Unique(unique bool) *AppQueryQuery {
	aqq.unique = &unique
	return aqq
}

// Order adds an order step to the query.
func (aqq *AppQueryQuery) Order(o ...OrderFunc) *AppQueryQuery {
	aqq.order = append(aqq.order, o...)
	return aqq
}

// QueryResponses chains the current query on the "responses" edge.
func (aqq *AppQueryQuery) QueryResponses() *AppResponseQuery {
	query := &AppResponseQuery{config: aqq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aqq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aqq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(appquery.Table, appquery.FieldID, selector),
			sqlgraph.To(appresponse.Table, appresponse.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, appquery.ResponsesTable, appquery.ResponsesColumn),
		)
		fromU = sqlgraph.SetNeighbors(aqq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryIpaddress chains the current query on the "ipaddress" edge.
func (aqq *AppQueryQuery) QueryIpaddress() *IPQuery {
	query := &IPQuery{config: aqq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aqq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aqq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(appquery.Table, appquery.FieldID, selector),
			sqlgraph.To(ip.Table, ip.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, appquery.IpaddressTable, appquery.IpaddressColumn),
		)
		fromU = sqlgraph.SetNeighbors(aqq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AppQuery entity from the query.
// Returns a *NotFoundError when no AppQuery was found.
func (aqq *AppQueryQuery) First(ctx context.Context) (*AppQuery, error) {
	nodes, err := aqq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{appquery.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (aqq *AppQueryQuery) FirstX(ctx context.Context) *AppQuery {
	node, err := aqq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AppQuery ID from the query.
// Returns a *NotFoundError when no AppQuery ID was found.
func (aqq *AppQueryQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = aqq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{appquery.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (aqq *AppQueryQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := aqq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AppQuery entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one AppQuery entity is not found.
// Returns a *NotFoundError when no AppQuery entities are found.
func (aqq *AppQueryQuery) Only(ctx context.Context) (*AppQuery, error) {
	nodes, err := aqq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{appquery.Label}
	default:
		return nil, &NotSingularError{appquery.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (aqq *AppQueryQuery) OnlyX(ctx context.Context) *AppQuery {
	node, err := aqq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AppQuery ID in the query.
// Returns a *NotSingularError when exactly one AppQuery ID is not found.
// Returns a *NotFoundError when no entities are found.
func (aqq *AppQueryQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = aqq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{appquery.Label}
	default:
		err = &NotSingularError{appquery.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (aqq *AppQueryQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := aqq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AppQueries.
func (aqq *AppQueryQuery) All(ctx context.Context) ([]*AppQuery, error) {
	if err := aqq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return aqq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (aqq *AppQueryQuery) AllX(ctx context.Context) []*AppQuery {
	nodes, err := aqq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AppQuery IDs.
func (aqq *AppQueryQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := aqq.Select(appquery.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (aqq *AppQueryQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := aqq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (aqq *AppQueryQuery) Count(ctx context.Context) (int, error) {
	if err := aqq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return aqq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (aqq *AppQueryQuery) CountX(ctx context.Context) int {
	count, err := aqq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (aqq *AppQueryQuery) Exist(ctx context.Context) (bool, error) {
	if err := aqq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return aqq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (aqq *AppQueryQuery) ExistX(ctx context.Context) bool {
	exist, err := aqq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AppQueryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (aqq *AppQueryQuery) Clone() *AppQueryQuery {
	if aqq == nil {
		return nil
	}
	return &AppQueryQuery{
		config:        aqq.config,
		limit:         aqq.limit,
		offset:        aqq.offset,
		order:         append([]OrderFunc{}, aqq.order...),
		predicates:    append([]predicate.AppQuery{}, aqq.predicates...),
		withResponses: aqq.withResponses.Clone(),
		withIpaddress: aqq.withIpaddress.Clone(),
		// clone intermediate query.
		sql:  aqq.sql.Clone(),
		path: aqq.path,
	}
}

// WithResponses tells the query-builder to eager-load the nodes that are connected to
// the "responses" edge. The optional arguments are used to configure the query builder of the edge.
func (aqq *AppQueryQuery) WithResponses(opts ...func(*AppResponseQuery)) *AppQueryQuery {
	query := &AppResponseQuery{config: aqq.config}
	for _, opt := range opts {
		opt(query)
	}
	aqq.withResponses = query
	return aqq
}

// WithIpaddress tells the query-builder to eager-load the nodes that are connected to
// the "ipaddress" edge. The optional arguments are used to configure the query builder of the edge.
func (aqq *AppQueryQuery) WithIpaddress(opts ...func(*IPQuery)) *AppQueryQuery {
	query := &IPQuery{config: aqq.config}
	for _, opt := range opts {
		opt(query)
	}
	aqq.withIpaddress = query
	return aqq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AppQuery.Query().
//		GroupBy(appquery.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (aqq *AppQueryQuery) GroupBy(field string, fields ...string) *AppQueryGroupBy {
	group := &AppQueryGroupBy{config: aqq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := aqq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return aqq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.AppQuery.Query().
//		Select(appquery.FieldCreatedAt).
//		Scan(ctx, &v)
//
func (aqq *AppQueryQuery) Select(fields ...string) *AppQuerySelect {
	aqq.fields = append(aqq.fields, fields...)
	return &AppQuerySelect{AppQueryQuery: aqq}
}

func (aqq *AppQueryQuery) prepareQuery(ctx context.Context) error {
	for _, f := range aqq.fields {
		if !appquery.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if aqq.path != nil {
		prev, err := aqq.path(ctx)
		if err != nil {
			return err
		}
		aqq.sql = prev
	}
	return nil
}

func (aqq *AppQueryQuery) sqlAll(ctx context.Context) ([]*AppQuery, error) {
	var (
		nodes       = []*AppQuery{}
		withFKs     = aqq.withFKs
		_spec       = aqq.querySpec()
		loadedTypes = [2]bool{
			aqq.withResponses != nil,
			aqq.withIpaddress != nil,
		}
	)
	if aqq.withIpaddress != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, appquery.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &AppQuery{config: aqq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, aqq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := aqq.withResponses; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[uuid.UUID]*AppQuery)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Responses = []*AppResponse{}
		}
		query.withFKs = true
		query.Where(predicate.AppResponse(func(s *sql.Selector) {
			s.Where(sql.InValues(appquery.ResponsesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.app_query_responses
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "app_query_responses" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "app_query_responses" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Responses = append(node.Edges.Responses, n)
		}
	}

	if query := aqq.withIpaddress; query != nil {
		ids := make([]uuid.UUID, 0, len(nodes))
		nodeids := make(map[uuid.UUID][]*AppQuery)
		for i := range nodes {
			if nodes[i].ip_queries == nil {
				continue
			}
			fk := *nodes[i].ip_queries
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(ip.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "ip_queries" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Ipaddress = n
			}
		}
	}

	return nodes, nil
}

func (aqq *AppQueryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := aqq.querySpec()
	return sqlgraph.CountNodes(ctx, aqq.driver, _spec)
}

func (aqq *AppQueryQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := aqq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (aqq *AppQueryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appquery.Table,
			Columns: appquery.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appquery.FieldID,
			},
		},
		From:   aqq.sql,
		Unique: true,
	}
	if unique := aqq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := aqq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appquery.FieldID)
		for i := range fields {
			if fields[i] != appquery.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := aqq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := aqq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := aqq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := aqq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (aqq *AppQueryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(aqq.driver.Dialect())
	t1 := builder.Table(appquery.Table)
	columns := aqq.fields
	if len(columns) == 0 {
		columns = appquery.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if aqq.sql != nil {
		selector = aqq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range aqq.predicates {
		p(selector)
	}
	for _, p := range aqq.order {
		p(selector)
	}
	if offset := aqq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := aqq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AppQueryGroupBy is the group-by builder for AppQuery entities.
type AppQueryGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (aqgb *AppQueryGroupBy) Aggregate(fns ...AggregateFunc) *AppQueryGroupBy {
	aqgb.fns = append(aqgb.fns, fns...)
	return aqgb
}

// Scan applies the group-by query and scans the result into the given value.
func (aqgb *AppQueryGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := aqgb.path(ctx)
	if err != nil {
		return err
	}
	aqgb.sql = query
	return aqgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (aqgb *AppQueryGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := aqgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (aqgb *AppQueryGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(aqgb.fields) > 1 {
		return nil, errors.New("ent: AppQueryGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := aqgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (aqgb *AppQueryGroupBy) StringsX(ctx context.Context) []string {
	v, err := aqgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (aqgb *AppQueryGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = aqgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{appquery.Label}
	default:
		err = fmt.Errorf("ent: AppQueryGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (aqgb *AppQueryGroupBy) StringX(ctx context.Context) string {
	v, err := aqgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (aqgb *AppQueryGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(aqgb.fields) > 1 {
		return nil, errors.New("ent: AppQueryGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := aqgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (aqgb *AppQueryGroupBy) IntsX(ctx context.Context) []int {
	v, err := aqgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (aqgb *AppQueryGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = aqgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{appquery.Label}
	default:
		err = fmt.Errorf("ent: AppQueryGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (aqgb *AppQueryGroupBy) IntX(ctx context.Context) int {
	v, err := aqgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (aqgb *AppQueryGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(aqgb.fields) > 1 {
		return nil, errors.New("ent: AppQueryGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := aqgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (aqgb *AppQueryGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := aqgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (aqgb *AppQueryGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = aqgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{appquery.Label}
	default:
		err = fmt.Errorf("ent: AppQueryGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (aqgb *AppQueryGroupBy) Float64X(ctx context.Context) float64 {
	v, err := aqgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (aqgb *AppQueryGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(aqgb.fields) > 1 {
		return nil, errors.New("ent: AppQueryGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := aqgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (aqgb *AppQueryGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := aqgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (aqgb *AppQueryGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = aqgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{appquery.Label}
	default:
		err = fmt.Errorf("ent: AppQueryGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (aqgb *AppQueryGroupBy) BoolX(ctx context.Context) bool {
	v, err := aqgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (aqgb *AppQueryGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range aqgb.fields {
		if !appquery.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := aqgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := aqgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (aqgb *AppQueryGroupBy) sqlQuery() *sql.Selector {
	selector := aqgb.sql.Select()
	aggregation := make([]string, 0, len(aqgb.fns))
	for _, fn := range aqgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(aqgb.fields)+len(aqgb.fns))
		for _, f := range aqgb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(aqgb.fields...)...)
}

// AppQuerySelect is the builder for selecting fields of AppQuery entities.
type AppQuerySelect struct {
	*AppQueryQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (aqs *AppQuerySelect) Scan(ctx context.Context, v interface{}) error {
	if err := aqs.prepareQuery(ctx); err != nil {
		return err
	}
	aqs.sql = aqs.AppQueryQuery.sqlQuery(ctx)
	return aqs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (aqs *AppQuerySelect) ScanX(ctx context.Context, v interface{}) {
	if err := aqs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (aqs *AppQuerySelect) Strings(ctx context.Context) ([]string, error) {
	if len(aqs.fields) > 1 {
		return nil, errors.New("ent: AppQuerySelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := aqs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (aqs *AppQuerySelect) StringsX(ctx context.Context) []string {
	v, err := aqs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (aqs *AppQuerySelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = aqs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{appquery.Label}
	default:
		err = fmt.Errorf("ent: AppQuerySelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (aqs *AppQuerySelect) StringX(ctx context.Context) string {
	v, err := aqs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (aqs *AppQuerySelect) Ints(ctx context.Context) ([]int, error) {
	if len(aqs.fields) > 1 {
		return nil, errors.New("ent: AppQuerySelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := aqs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (aqs *AppQuerySelect) IntsX(ctx context.Context) []int {
	v, err := aqs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (aqs *AppQuerySelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = aqs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{appquery.Label}
	default:
		err = fmt.Errorf("ent: AppQuerySelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (aqs *AppQuerySelect) IntX(ctx context.Context) int {
	v, err := aqs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (aqs *AppQuerySelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(aqs.fields) > 1 {
		return nil, errors.New("ent: AppQuerySelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := aqs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (aqs *AppQuerySelect) Float64sX(ctx context.Context) []float64 {
	v, err := aqs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (aqs *AppQuerySelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = aqs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{appquery.Label}
	default:
		err = fmt.Errorf("ent: AppQuerySelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (aqs *AppQuerySelect) Float64X(ctx context.Context) float64 {
	v, err := aqs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (aqs *AppQuerySelect) Bools(ctx context.Context) ([]bool, error) {
	if len(aqs.fields) > 1 {
		return nil, errors.New("ent: AppQuerySelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := aqs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (aqs *AppQuerySelect) BoolsX(ctx context.Context) []bool {
	v, err := aqs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (aqs *AppQuerySelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = aqs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{appquery.Label}
	default:
		err = fmt.Errorf("ent: AppQuerySelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (aqs *AppQuerySelect) BoolX(ctx context.Context) bool {
	v, err := aqs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (aqs *AppQuerySelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := aqs.sql.Query()
	if err := aqs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
